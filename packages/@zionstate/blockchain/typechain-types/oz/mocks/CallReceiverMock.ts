/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../common";

export interface CallReceiverMockInterface extends utils.Interface {
  functions: {
    "mockFunction()": FunctionFragment;
    "mockFunctionNonPayable()": FunctionFragment;
    "mockFunctionOutOfGas()": FunctionFragment;
    "mockFunctionRevertsNoReason()": FunctionFragment;
    "mockFunctionRevertsReason()": FunctionFragment;
    "mockFunctionThrows()": FunctionFragment;
    "mockFunctionWritesStorage()": FunctionFragment;
    "mockStaticFunction()": FunctionFragment;
    "sharedAnswer()": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "mockFunction"
      | "mockFunctionNonPayable"
      | "mockFunctionOutOfGas"
      | "mockFunctionRevertsNoReason"
      | "mockFunctionRevertsReason"
      | "mockFunctionThrows"
      | "mockFunctionWritesStorage"
      | "mockStaticFunction"
      | "sharedAnswer"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "mockFunction",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "mockFunctionNonPayable",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "mockFunctionOutOfGas",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "mockFunctionRevertsNoReason",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "mockFunctionRevertsReason",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "mockFunctionThrows",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "mockFunctionWritesStorage",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "mockStaticFunction",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "sharedAnswer",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "mockFunction",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "mockFunctionNonPayable",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "mockFunctionOutOfGas",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "mockFunctionRevertsNoReason",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "mockFunctionRevertsReason",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "mockFunctionThrows",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "mockFunctionWritesStorage",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "mockStaticFunction",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "sharedAnswer",
    data: BytesLike
  ): Result;

  events: {
    "MockFunctionCalled()": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "MockFunctionCalled"): EventFragment;
}

export interface MockFunctionCalledEventObject {}
export type MockFunctionCalledEvent = TypedEvent<
  [],
  MockFunctionCalledEventObject
>;

export type MockFunctionCalledEventFilter =
  TypedEventFilter<MockFunctionCalledEvent>;

export interface CallReceiverMock extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: CallReceiverMockInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    mockFunction(
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    mockFunctionNonPayable(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    mockFunctionOutOfGas(
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    mockFunctionRevertsNoReason(
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    mockFunctionRevertsReason(
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    mockFunctionThrows(
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    mockFunctionWritesStorage(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    mockStaticFunction(overrides?: CallOverrides): Promise<[string]>;

    sharedAnswer(overrides?: CallOverrides): Promise<[string]>;
  };

  mockFunction(
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  mockFunctionNonPayable(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  mockFunctionOutOfGas(
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  mockFunctionRevertsNoReason(
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  mockFunctionRevertsReason(
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  mockFunctionThrows(
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  mockFunctionWritesStorage(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  mockStaticFunction(overrides?: CallOverrides): Promise<string>;

  sharedAnswer(overrides?: CallOverrides): Promise<string>;

  callStatic: {
    mockFunction(overrides?: CallOverrides): Promise<string>;

    mockFunctionNonPayable(overrides?: CallOverrides): Promise<string>;

    mockFunctionOutOfGas(overrides?: CallOverrides): Promise<void>;

    mockFunctionRevertsNoReason(overrides?: CallOverrides): Promise<void>;

    mockFunctionRevertsReason(overrides?: CallOverrides): Promise<void>;

    mockFunctionThrows(overrides?: CallOverrides): Promise<void>;

    mockFunctionWritesStorage(overrides?: CallOverrides): Promise<string>;

    mockStaticFunction(overrides?: CallOverrides): Promise<string>;

    sharedAnswer(overrides?: CallOverrides): Promise<string>;
  };

  filters: {
    "MockFunctionCalled()"(): MockFunctionCalledEventFilter;
    MockFunctionCalled(): MockFunctionCalledEventFilter;
  };

  estimateGas: {
    mockFunction(
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    mockFunctionNonPayable(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    mockFunctionOutOfGas(
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    mockFunctionRevertsNoReason(
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    mockFunctionRevertsReason(
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    mockFunctionThrows(
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    mockFunctionWritesStorage(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    mockStaticFunction(overrides?: CallOverrides): Promise<BigNumber>;

    sharedAnswer(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    mockFunction(
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    mockFunctionNonPayable(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    mockFunctionOutOfGas(
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    mockFunctionRevertsNoReason(
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    mockFunctionRevertsReason(
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    mockFunctionThrows(
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    mockFunctionWritesStorage(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    mockStaticFunction(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    sharedAnswer(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
