/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../common";

export interface ClonesMockInterface extends utils.Interface {
  functions: {
    "clone(address,bytes)": FunctionFragment;
    "cloneDeterministic(address,bytes32,bytes)": FunctionFragment;
    "predictDeterministicAddress(address,bytes32)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "clone"
      | "cloneDeterministic"
      | "predictDeterministicAddress"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "clone",
    values: [PromiseOrValue<string>, PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "cloneDeterministic",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "predictDeterministicAddress",
    values: [PromiseOrValue<string>, PromiseOrValue<BytesLike>]
  ): string;

  decodeFunctionResult(functionFragment: "clone", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "cloneDeterministic",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "predictDeterministicAddress",
    data: BytesLike
  ): Result;

  events: {
    "NewInstance(address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "NewInstance"): EventFragment;
}

export interface NewInstanceEventObject {
  instance: string;
}
export type NewInstanceEvent = TypedEvent<[string], NewInstanceEventObject>;

export type NewInstanceEventFilter = TypedEventFilter<NewInstanceEvent>;

export interface ClonesMock extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: ClonesMockInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    clone(
      implementation: PromiseOrValue<string>,
      initdata: PromiseOrValue<BytesLike>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    cloneDeterministic(
      implementation: PromiseOrValue<string>,
      salt: PromiseOrValue<BytesLike>,
      initdata: PromiseOrValue<BytesLike>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    predictDeterministicAddress(
      implementation: PromiseOrValue<string>,
      salt: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[string] & { predicted: string }>;
  };

  clone(
    implementation: PromiseOrValue<string>,
    initdata: PromiseOrValue<BytesLike>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  cloneDeterministic(
    implementation: PromiseOrValue<string>,
    salt: PromiseOrValue<BytesLike>,
    initdata: PromiseOrValue<BytesLike>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  predictDeterministicAddress(
    implementation: PromiseOrValue<string>,
    salt: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<string>;

  callStatic: {
    clone(
      implementation: PromiseOrValue<string>,
      initdata: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    cloneDeterministic(
      implementation: PromiseOrValue<string>,
      salt: PromiseOrValue<BytesLike>,
      initdata: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    predictDeterministicAddress(
      implementation: PromiseOrValue<string>,
      salt: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<string>;
  };

  filters: {
    "NewInstance(address)"(instance?: null): NewInstanceEventFilter;
    NewInstance(instance?: null): NewInstanceEventFilter;
  };

  estimateGas: {
    clone(
      implementation: PromiseOrValue<string>,
      initdata: PromiseOrValue<BytesLike>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    cloneDeterministic(
      implementation: PromiseOrValue<string>,
      salt: PromiseOrValue<BytesLike>,
      initdata: PromiseOrValue<BytesLike>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    predictDeterministicAddress(
      implementation: PromiseOrValue<string>,
      salt: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    clone(
      implementation: PromiseOrValue<string>,
      initdata: PromiseOrValue<BytesLike>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    cloneDeterministic(
      implementation: PromiseOrValue<string>,
      salt: PromiseOrValue<BytesLike>,
      initdata: PromiseOrValue<BytesLike>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    predictDeterministicAddress(
      implementation: PromiseOrValue<string>,
      salt: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
