/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../../common";
import type {
  AddressImpl,
  AddressImplInterface,
} from "../../../oz/mocks/AddressImpl";

const _abi = [
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "string",
        name: "data",
        type: "string",
      },
    ],
    name: "CallReturnValue",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "target",
        type: "address",
      },
      {
        internalType: "bytes",
        name: "data",
        type: "bytes",
      },
    ],
    name: "functionCall",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "target",
        type: "address",
      },
      {
        internalType: "bytes",
        name: "data",
        type: "bytes",
      },
      {
        internalType: "uint256",
        name: "value",
        type: "uint256",
      },
    ],
    name: "functionCallWithValue",
    outputs: [],
    stateMutability: "payable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "target",
        type: "address",
      },
      {
        internalType: "bytes",
        name: "data",
        type: "bytes",
      },
    ],
    name: "functionDelegateCall",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "target",
        type: "address",
      },
      {
        internalType: "bytes",
        name: "data",
        type: "bytes",
      },
    ],
    name: "functionStaticCall",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "account",
        type: "address",
      },
    ],
    name: "isContract",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address payable",
        name: "receiver",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "sendValue",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "sharedAnswer",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    stateMutability: "payable",
    type: "receive",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b50611393806100206000396000f3fe6080604052600436106100745760003560e01c8063a0b5ffb01161004e578063a0b5ffb014610102578063c21d36f31461012b578063ee33b7e214610154578063fc40cf731461017d5761007b565b8063162790551461008057806324a084df146100bd5780632a011594146100e65761007b565b3661007b57005b600080fd5b34801561008c57600080fd5b506100a760048036038101906100a29190610a59565b6101a8565b6040516100b49190610aa1565b60405180910390f35b3480156100c957600080fd5b506100e460048036038101906100df9190610b30565b6101ba565b005b61010060048036038101906100fb9190610bd5565b6101c8565b005b34801561010e57600080fd5b5061012960048036038101906101249190610c49565b61026c565b005b34801561013757600080fd5b50610152600480360381019061014d9190610c49565b61030e565b005b34801561016057600080fd5b5061017b60048036038101906101769190610c49565b6103b0565b005b34801561018957600080fd5b50610192610452565b60405161019f9190610d42565b60405180910390f35b60006101b3826104e0565b9050919050565b6101c482826104f3565b5050565b60006102198585858080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f82011690508083019250505050505050846105e7565b90507fe518073da644d0626295bee74d5d5c51447a33857c62913bb30f35e2fba3db7c818060200190518101906102509190610e85565b60405161025d9190610d42565b60405180910390a15050505050565b60006102bc8484848080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f82011690508083019250505050505050610616565b90507fe518073da644d0626295bee74d5d5c51447a33857c62913bb30f35e2fba3db7c818060200190518101906102f39190610e85565b6040516103009190610d42565b60405180910390a150505050565b600061035e8484848080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f82011690508083019250505050505050610660565b90507fe518073da644d0626295bee74d5d5c51447a33857c62913bb30f35e2fba3db7c818060200190518101906103959190610e85565b6040516103a29190610d42565b60405180910390a150505050565b60006104008484848080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f8201169050808301925050505050505061068d565b90507fe518073da644d0626295bee74d5d5c51447a33857c62913bb30f35e2fba3db7c818060200190518101906104379190610e85565b6040516104449190610d42565b60405180910390a150505050565b6000805461045f90610efd565b80601f016020809104026020016040519081016040528092919081815260200182805461048b90610efd565b80156104d85780601f106104ad576101008083540402835291602001916104d8565b820191906000526020600020905b8154815290600101906020018083116104bb57829003601f168201915b505050505081565b600080823b905060008111915050919050565b80471015610536576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161052d90610f7b565b60405180910390fd5b60008273ffffffffffffffffffffffffffffffffffffffff168260405161055c90610fcc565b60006040518083038185875af1925050503d8060008114610599576040519150601f19603f3d011682016040523d82523d6000602084013e61059e565b606091505b50509050806105e2576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016105d990611053565b60405180910390fd5b505050565b606061060d8484846040518060600160405280602981526020016112e9602991396106ba565b90509392505050565b606061065883836040518060400160405280601e81526020017f416464726573733a206c6f772d6c6576656c2063616c6c206661696c656400008152506107ce565b905092915050565b60606106858383604051806060016040528060258152602001611312602591396107e6565b905092915050565b60606106b28383604051806060016040528060278152602001611337602791396108b3565b905092915050565b6060824710156106ff576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016106f6906110e5565b60405180910390fd5b610708856104e0565b610747576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161073e90611151565b60405180910390fd5b6000808673ffffffffffffffffffffffffffffffffffffffff16858760405161077091906111ad565b60006040518083038185875af1925050503d80600081146107ad576040519150601f19603f3d011682016040523d82523d6000602084013e6107b2565b606091505b50915091506107c2828286610980565b92505050949350505050565b60606107dd84846000856106ba565b90509392505050565b60606107f1846104e0565b610830576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161082790611236565b60405180910390fd5b6000808573ffffffffffffffffffffffffffffffffffffffff168560405161085891906111ad565b600060405180830381855afa9150503d8060008114610893576040519150601f19603f3d011682016040523d82523d6000602084013e610898565b606091505b50915091506108a8828286610980565b925050509392505050565b60606108be846104e0565b6108fd576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016108f4906112c8565b60405180910390fd5b6000808573ffffffffffffffffffffffffffffffffffffffff168560405161092591906111ad565b600060405180830381855af49150503d8060008114610960576040519150601f19603f3d011682016040523d82523d6000602084013e610965565b606091505b5091509150610975828286610980565b925050509392505050565b60608315610990578290506109e0565b6000835111156109a35782518084602001fd5b816040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016109d79190610d42565b60405180910390fd5b9392505050565b6000604051905090565b600080fd5b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000610a26826109fb565b9050919050565b610a3681610a1b565b8114610a4157600080fd5b50565b600081359050610a5381610a2d565b92915050565b600060208284031215610a6f57610a6e6109f1565b5b6000610a7d84828501610a44565b91505092915050565b60008115159050919050565b610a9b81610a86565b82525050565b6000602082019050610ab66000830184610a92565b92915050565b6000610ac7826109fb565b9050919050565b610ad781610abc565b8114610ae257600080fd5b50565b600081359050610af481610ace565b92915050565b6000819050919050565b610b0d81610afa565b8114610b1857600080fd5b50565b600081359050610b2a81610b04565b92915050565b60008060408385031215610b4757610b466109f1565b5b6000610b5585828601610ae5565b9250506020610b6685828601610b1b565b9150509250929050565b600080fd5b600080fd5b600080fd5b60008083601f840112610b9557610b94610b70565b5b8235905067ffffffffffffffff811115610bb257610bb1610b75565b5b602083019150836001820283011115610bce57610bcd610b7a565b5b9250929050565b60008060008060608587031215610bef57610bee6109f1565b5b6000610bfd87828801610a44565b945050602085013567ffffffffffffffff811115610c1e57610c1d6109f6565b5b610c2a87828801610b7f565b93509350506040610c3d87828801610b1b565b91505092959194509250565b600080600060408486031215610c6257610c616109f1565b5b6000610c7086828701610a44565b935050602084013567ffffffffffffffff811115610c9157610c906109f6565b5b610c9d86828701610b7f565b92509250509250925092565b600081519050919050565b600082825260208201905092915050565b60005b83811015610ce3578082015181840152602081019050610cc8565b83811115610cf2576000848401525b50505050565b6000601f19601f8301169050919050565b6000610d1482610ca9565b610d1e8185610cb4565b9350610d2e818560208601610cc5565b610d3781610cf8565b840191505092915050565b60006020820190508181036000830152610d5c8184610d09565b905092915050565b600080fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b610da182610cf8565b810181811067ffffffffffffffff82111715610dc057610dbf610d69565b5b80604052505050565b6000610dd36109e7565b9050610ddf8282610d98565b919050565b600067ffffffffffffffff821115610dff57610dfe610d69565b5b610e0882610cf8565b9050602081019050919050565b6000610e28610e2384610de4565b610dc9565b905082815260208101848484011115610e4457610e43610d64565b5b610e4f848285610cc5565b509392505050565b600082601f830112610e6c57610e6b610b70565b5b8151610e7c848260208601610e15565b91505092915050565b600060208284031215610e9b57610e9a6109f1565b5b600082015167ffffffffffffffff811115610eb957610eb86109f6565b5b610ec584828501610e57565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b60006002820490506001821680610f1557607f821691505b60208210811415610f2957610f28610ece565b5b50919050565b7f416464726573733a20696e73756666696369656e742062616c616e6365000000600082015250565b6000610f65601d83610cb4565b9150610f7082610f2f565b602082019050919050565b60006020820190508181036000830152610f9481610f58565b9050919050565b600081905092915050565b50565b6000610fb6600083610f9b565b9150610fc182610fa6565b600082019050919050565b6000610fd782610fa9565b9150819050919050565b7f416464726573733a20756e61626c6520746f2073656e642076616c75652c207260008201527f6563697069656e74206d61792068617665207265766572746564000000000000602082015250565b600061103d603a83610cb4565b915061104882610fe1565b604082019050919050565b6000602082019050818103600083015261106c81611030565b9050919050565b7f416464726573733a20696e73756666696369656e742062616c616e636520666f60008201527f722063616c6c0000000000000000000000000000000000000000000000000000602082015250565b60006110cf602683610cb4565b91506110da82611073565b604082019050919050565b600060208201905081810360008301526110fe816110c2565b9050919050565b7f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000600082015250565b600061113b601d83610cb4565b915061114682611105565b602082019050919050565b6000602082019050818103600083015261116a8161112e565b9050919050565b600081519050919050565b600061118782611171565b6111918185610f9b565b93506111a1818560208601610cc5565b80840191505092915050565b60006111b9828461117c565b915081905092915050565b7f416464726573733a207374617469632063616c6c20746f206e6f6e2d636f6e7460008201527f7261637400000000000000000000000000000000000000000000000000000000602082015250565b6000611220602483610cb4565b915061122b826111c4565b604082019050919050565b6000602082019050818103600083015261124f81611213565b9050919050565b7f416464726573733a2064656c65676174652063616c6c20746f206e6f6e2d636f60008201527f6e74726163740000000000000000000000000000000000000000000000000000602082015250565b60006112b2602683610cb4565b91506112bd82611256565b604082019050919050565b600060208201905081810360008301526112e1816112a5565b905091905056fe416464726573733a206c6f772d6c6576656c2063616c6c20776974682076616c7565206661696c6564416464726573733a206c6f772d6c6576656c207374617469632063616c6c206661696c6564416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c206661696c6564a264697066735822122023539c3a8772dea7082dced9662d775fbbd459b112470f0699a8fe5731d0286264736f6c63430008090033";

type AddressImplConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: AddressImplConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class AddressImpl__factory extends ContractFactory {
  constructor(...args: AddressImplConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<AddressImpl> {
    return super.deploy(overrides || {}) as Promise<AddressImpl>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): AddressImpl {
    return super.attach(address) as AddressImpl;
  }
  override connect(signer: Signer): AddressImpl__factory {
    return super.connect(signer) as AddressImpl__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): AddressImplInterface {
    return new utils.Interface(_abi) as AddressImplInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): AddressImpl {
    return new Contract(address, _abi, signerOrProvider) as AddressImpl;
  }
}
