/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../../../common";
import type {
  SampleFather,
  SampleFatherInterface,
} from "../../../../oz/mocks/MultipleInheritanceInitializableMocks.sol/SampleFather";

const _abi = [
  {
    inputs: [],
    name: "father",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "gramps",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "initialize",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "string",
        name: "_gramps",
        type: "string",
      },
      {
        internalType: "uint256",
        name: "_father",
        type: "uint256",
      },
    ],
    name: "initialize",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "string",
        name: "value",
        type: "string",
      },
    ],
    name: "initialize",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "isHuman",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b5061098d806100206000396000f3fe608060405234801561001057600080fd5b50600436106100625760003560e01c80631c8aca3b146100675780634a6c9db6146100855780638129fc1c146100a35780638beaf7d7146100ad578063f62d1888146100c9578063fa39851f146100e5575b600080fd5b61006f610103565b60405161007c919061053e565b60405180910390f35b61008d610109565b60405161009a9190610574565b60405180910390f35b6100ab61011c565b005b6100c760048036038101906100c29190610715565b610210565b005b6100e360048036038101906100de9190610771565b6102fb565b005b6100ed6103f4565b6040516100fa9190610842565b60405180910390f35b60025481565b600060029054906101000a900460ff1681565b600060019054906101000a900460ff1680610142575060008054906101000a900460ff16155b610181576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610178906108d6565b60405180910390fd5b60008060019054906101000a900460ff1615905080156101d1576001600060016101000a81548160ff02191690831515021790555060016000806101000a81548160ff0219169083151502179055505b6001600060026101000a81548160ff021916908315150217905550801561020d5760008060016101000a81548160ff0219169083151502179055505b50565b600060019054906101000a900460ff1680610236575060008054906101000a900460ff16155b610275576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161026c906108d6565b60405180910390fd5b60008060019054906101000a900460ff1615905080156102c5576001600060016101000a81548160ff02191690831515021790555060016000806101000a81548160ff0219169083151502179055505b6102ce836102fb565b8160028190555080156102f65760008060016101000a81548160ff0219169083151502179055505b505050565b600060019054906101000a900460ff1680610321575060008054906101000a900460ff16155b610360576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610357906108d6565b60405180910390fd5b60008060019054906101000a900460ff1615905080156103b0576001600060016101000a81548160ff02191690831515021790555060016000806101000a81548160ff0219169083151502179055505b6103b861011c565b81600190805190602001906103ce929190610482565b5080156103f05760008060016101000a81548160ff0219169083151502179055505b5050565b6001805461040190610925565b80601f016020809104026020016040519081016040528092919081815260200182805461042d90610925565b801561047a5780601f1061044f5761010080835404028352916020019161047a565b820191906000526020600020905b81548152906001019060200180831161045d57829003601f168201915b505050505081565b82805461048e90610925565b90600052602060002090601f0160209004810192826104b057600085556104f7565b82601f106104c957805160ff19168380011785556104f7565b828001600101855582156104f7579182015b828111156104f65782518255916020019190600101906104db565b5b5090506105049190610508565b5090565b5b80821115610521576000816000905550600101610509565b5090565b6000819050919050565b61053881610525565b82525050565b6000602082019050610553600083018461052f565b92915050565b60008115159050919050565b61056e81610559565b82525050565b60006020820190506105896000830184610565565b92915050565b6000604051905090565b600080fd5b600080fd5b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6105f6826105ad565b810181811067ffffffffffffffff82111715610615576106146105be565b5b80604052505050565b600061062861058f565b905061063482826105ed565b919050565b600067ffffffffffffffff821115610654576106536105be565b5b61065d826105ad565b9050602081019050919050565b82818337600083830152505050565b600061068c61068784610639565b61061e565b9050828152602081018484840111156106a8576106a76105a8565b5b6106b384828561066a565b509392505050565b600082601f8301126106d0576106cf6105a3565b5b81356106e0848260208601610679565b91505092915050565b6106f281610525565b81146106fd57600080fd5b50565b60008135905061070f816106e9565b92915050565b6000806040838503121561072c5761072b610599565b5b600083013567ffffffffffffffff81111561074a5761074961059e565b5b610756858286016106bb565b925050602061076785828601610700565b9150509250929050565b60006020828403121561078757610786610599565b5b600082013567ffffffffffffffff8111156107a5576107a461059e565b5b6107b1848285016106bb565b91505092915050565b600081519050919050565b600082825260208201905092915050565b60005b838110156107f45780820151818401526020810190506107d9565b83811115610803576000848401525b50505050565b6000610814826107ba565b61081e81856107c5565b935061082e8185602086016107d6565b610837816105ad565b840191505092915050565b6000602082019050818103600083015261085c8184610809565b905092915050565b7f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160008201527f647920696e697469616c697a6564000000000000000000000000000000000000602082015250565b60006108c0602e836107c5565b91506108cb82610864565b604082019050919050565b600060208201905081810360008301526108ef816108b3565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b6000600282049050600182168061093d57607f821691505b60208210811415610951576109506108f6565b5b5091905056fea26469706673582212200524334ccc65fe2828666416321cff95e45d47395773aefcba8370cd54a60f5c64736f6c63430008090033";

type SampleFatherConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: SampleFatherConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class SampleFather__factory extends ContractFactory {
  constructor(...args: SampleFatherConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<SampleFather> {
    return super.deploy(overrides || {}) as Promise<SampleFather>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): SampleFather {
    return super.attach(address) as SampleFather;
  }
  override connect(signer: Signer): SampleFather__factory {
    return super.connect(signer) as SampleFather__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): SampleFatherInterface {
    return new utils.Interface(_abi) as SampleFatherInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): SampleFather {
    return new Contract(address, _abi, signerOrProvider) as SampleFather;
  }
}
