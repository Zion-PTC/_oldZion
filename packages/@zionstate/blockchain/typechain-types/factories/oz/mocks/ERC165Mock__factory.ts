/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../../common";
import type {
  ERC165Mock,
  ERC165MockInterface,
} from "../../../oz/mocks/ERC165Mock";

const _abi = [
  {
    inputs: [
      {
        internalType: "bytes4",
        name: "interfaceId",
        type: "bytes4",
      },
    ],
    name: "supportsInterface",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b506101c0806100206000396000f3fe608060405234801561001057600080fd5b506004361061002b5760003560e01c806301ffc9a714610030575b600080fd5b61004a60048036038101906100459190610127565b610060565b604051610057919061016f565b60405180910390f35b60007f01ffc9a7000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916149050919050565b600080fd5b60007fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b610104816100cf565b811461010f57600080fd5b50565b600081359050610121816100fb565b92915050565b60006020828403121561013d5761013c6100ca565b5b600061014b84828501610112565b91505092915050565b60008115159050919050565b61016981610154565b82525050565b60006020820190506101846000830184610160565b9291505056fea2646970667358221220d0e236406e5a569d5fd5808010c54a3f5bc05800bd1958866b1537b6febcef6964736f6c63430008090033";

type ERC165MockConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: ERC165MockConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class ERC165Mock__factory extends ContractFactory {
  constructor(...args: ERC165MockConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ERC165Mock> {
    return super.deploy(overrides || {}) as Promise<ERC165Mock>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): ERC165Mock {
    return super.attach(address) as ERC165Mock;
  }
  override connect(signer: Signer): ERC165Mock__factory {
    return super.connect(signer) as ERC165Mock__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): ERC165MockInterface {
    return new utils.Interface(_abi) as ERC165MockInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): ERC165Mock {
    return new Contract(address, _abi, signerOrProvider) as ERC165Mock;
  }
}
