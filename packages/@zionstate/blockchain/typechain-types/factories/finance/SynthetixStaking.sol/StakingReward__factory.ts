/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../../common";
import type {
  StakingReward,
  StakingRewardInterface,
} from "../../../finance/SynthetixStaking.sol/StakingReward";

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "_stakingToken",
        type: "address",
      },
      {
        internalType: "address",
        name: "_rewardsToken",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "account",
        type: "address",
      },
    ],
    name: "earned",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "getReward",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "lastUpdateTime",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "rewardPerToken",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "rewardPerTokenStored",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "rewardRate",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    name: "rewards",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "rewardsToken",
    outputs: [
      {
        internalType: "contract IERC20",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "_amount",
        type: "uint256",
      },
    ],
    name: "stake",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "stakingToken",
    outputs: [
      {
        internalType: "contract IERC20",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    name: "userRewardPerTokenPaid",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "_amount",
        type: "uint256",
      },
    ],
    name: "withdraw",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
];

const _bytecode =
  "0x608060405260646002553480156200001657600080fd5b5060405162000f4438038062000f4483398181016040528101906200003c91906200012f565b81600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550806000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550505062000176565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000620000f782620000ca565b9050919050565b6200010981620000ea565b81146200011557600080fd5b50565b6000815190506200012981620000fe565b92915050565b60008060408385031215620001495762000148620000c5565b5b6000620001598582860162000118565b92505060206200016c8582860162000118565b9150509250929050565b610dbe80620001866000396000f3fe608060405234801561001057600080fd5b50600436106100b35760003560e01c80638b876347116100715780638b8763471461017a578063a694fc3a146101aa578063c8f33c91146101c6578063cd3daf9d146101e4578063d1af0c7d14610202578063df136d6514610220576100b3565b80628cc262146100b85780630700037d146100e85780632e1a7d4d146101185780633d18b9121461013457806372f702f31461013e5780637b0a47ee1461015c575b600080fd5b6100d260048036038101906100cd9190610a0d565b61023e565b6040516100df9190610a53565b60405180910390f35b61010260048036038101906100fd9190610a0d565b610340565b60405161010f9190610a53565b60405180910390f35b610132600480360381019061012d9190610a9a565b610358565b005b61013c610523565b005b610146610706565b6040516101539190610b26565b60405180910390f35b61016461072c565b6040516101719190610a53565b60405180910390f35b610194600480360381019061018f9190610a0d565b610732565b6040516101a19190610a53565b60405180910390f35b6101c460048036038101906101bf9190610a9a565b61074a565b005b6101ce610917565b6040516101db9190610a53565b60405180910390f35b6101ec61091d565b6040516101f99190610a53565b60405180910390f35b61020a610980565b6040516102179190610b26565b60405180910390f35b6102286109a4565b6040516102359190610a53565b60405180910390f35b6000600660008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054670de0b6b3a7640000600560008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546102d161091d565b6102db9190610b70565b600860008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546103259190610ba4565b61032f9190610c2d565b6103399190610c5e565b9050919050565b60066020528060005260406000206000915090505481565b3361036161091d565b600481905550426003819055506103778161023e565b600660008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550600454600560008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555081600760008282546104129190610b70565b9250508190555081600860003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546104689190610b70565b92505081905550600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a9059cbb30846040518363ffffffff1660e01b81526004016104cc929190610cc3565b602060405180830381600087803b1580156104e657600080fd5b505af11580156104fa573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061051e9190610d24565b505050565b3361052c61091d565b600481905550426003819055506105428161023e565b600660008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550600454600560008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055506000600660003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205490506000600660003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555060008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a9059cbb33836040518363ffffffff1660e01b81526004016106af929190610cc3565b602060405180830381600087803b1580156106c957600080fd5b505af11580156106dd573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107019190610d24565b505050565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60025481565b60056020528060005260406000206000915090505481565b3361075361091d565b600481905550426003819055506107698161023e565b600660008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550600454600560008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166323b872dd3330856040518463ffffffff1660e01b815260040161085193929190610d51565b602060405180830381600087803b15801561086b57600080fd5b505af115801561087f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108a39190610d24565b5081600760008282546108b69190610c5e565b9250508190555081600860003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825461090c9190610c5e565b925050819055505050565b60035481565b6000806007541415610932576000905061097d565b600754670de0b6b3a76400006003544261094c9190610b70565b6002546109599190610ba4565b6109639190610ba4565b61096d9190610c2d565b60045461097a9190610c5e565b90505b90565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60045481565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006109da826109af565b9050919050565b6109ea816109cf565b81146109f557600080fd5b50565b600081359050610a07816109e1565b92915050565b600060208284031215610a2357610a226109aa565b5b6000610a31848285016109f8565b91505092915050565b6000819050919050565b610a4d81610a3a565b82525050565b6000602082019050610a686000830184610a44565b92915050565b610a7781610a3a565b8114610a8257600080fd5b50565b600081359050610a9481610a6e565b92915050565b600060208284031215610ab057610aaf6109aa565b5b6000610abe84828501610a85565b91505092915050565b6000819050919050565b6000610aec610ae7610ae2846109af565b610ac7565b6109af565b9050919050565b6000610afe82610ad1565b9050919050565b6000610b1082610af3565b9050919050565b610b2081610b05565b82525050565b6000602082019050610b3b6000830184610b17565b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000610b7b82610a3a565b9150610b8683610a3a565b925082821015610b9957610b98610b41565b5b828203905092915050565b6000610baf82610a3a565b9150610bba83610a3a565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0483118215151615610bf357610bf2610b41565b5b828202905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b6000610c3882610a3a565b9150610c4383610a3a565b925082610c5357610c52610bfe565b5b828204905092915050565b6000610c6982610a3a565b9150610c7483610a3a565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03821115610ca957610ca8610b41565b5b828201905092915050565b610cbd816109cf565b82525050565b6000604082019050610cd86000830185610cb4565b610ce56020830184610a44565b9392505050565b60008115159050919050565b610d0181610cec565b8114610d0c57600080fd5b50565b600081519050610d1e81610cf8565b92915050565b600060208284031215610d3a57610d396109aa565b5b6000610d4884828501610d0f565b91505092915050565b6000606082019050610d666000830186610cb4565b610d736020830185610cb4565b610d806040830184610a44565b94935050505056fea264697066735822122060ba7d25ecad0c4715df9705581f372778ee910b752cff78c75044a32d6c327964736f6c63430008090033";

type StakingRewardConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: StakingRewardConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class StakingReward__factory extends ContractFactory {
  constructor(...args: StakingRewardConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    _stakingToken: PromiseOrValue<string>,
    _rewardsToken: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<StakingReward> {
    return super.deploy(
      _stakingToken,
      _rewardsToken,
      overrides || {}
    ) as Promise<StakingReward>;
  }
  override getDeployTransaction(
    _stakingToken: PromiseOrValue<string>,
    _rewardsToken: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(
      _stakingToken,
      _rewardsToken,
      overrides || {}
    );
  }
  override attach(address: string): StakingReward {
    return super.attach(address) as StakingReward;
  }
  override connect(signer: Signer): StakingReward__factory {
    return super.connect(signer) as StakingReward__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): StakingRewardInterface {
    return new utils.Interface(_abi) as StakingRewardInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): StakingReward {
    return new Contract(address, _abi, signerOrProvider) as StakingReward;
  }
}
