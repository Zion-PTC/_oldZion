/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../common";

export interface TokenShopInterface extends utils.Interface {
  functions: {
    "buyTokens(uint256)": FunctionFragment;
    "crowdSaleOpen()": FunctionFragment;
    "getContractBalanceOfToken()": FunctionFragment;
    "getPrice()": FunctionFragment;
    "membership()": FunctionFragment;
    "owner()": FunctionFragment;
    "price()": FunctionFragment;
    "raisedCapital()": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "setCrowdSaleState()": FunctionFragment;
    "setPrice(uint256)": FunctionFragment;
    "tokenContract()": FunctionFragment;
    "tokenUsedForPayement()": FunctionFragment;
    "tokensBoughtByBuyer(address)": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "withdrawRaisedCapital()": FunctionFragment;
    "withdrawTokensOnSale(uint256)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "buyTokens"
      | "crowdSaleOpen"
      | "getContractBalanceOfToken"
      | "getPrice"
      | "membership"
      | "owner"
      | "price"
      | "raisedCapital"
      | "renounceOwnership"
      | "setCrowdSaleState"
      | "setPrice"
      | "tokenContract"
      | "tokenUsedForPayement"
      | "tokensBoughtByBuyer"
      | "transferOwnership"
      | "withdrawRaisedCapital"
      | "withdrawTokensOnSale"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "buyTokens",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "crowdSaleOpen",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getContractBalanceOfToken",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "getPrice", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "membership",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(functionFragment: "price", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "raisedCapital",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setCrowdSaleState",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setPrice",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "tokenContract",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "tokenUsedForPayement",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "tokensBoughtByBuyer",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawRaisedCapital",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawTokensOnSale",
    values: [PromiseOrValue<BigNumberish>]
  ): string;

  decodeFunctionResult(functionFragment: "buyTokens", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "crowdSaleOpen",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getContractBalanceOfToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getPrice", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "membership", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "price", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "raisedCapital",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setCrowdSaleState",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setPrice", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "tokenContract",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "tokenUsedForPayement",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "tokensBoughtByBuyer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawRaisedCapital",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawTokensOnSale",
    data: BytesLike
  ): Result;

  events: {
    "CapitalWithdrawal(address,uint256)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
    "PriceChanged(address,uint256)": EventFragment;
    "ShopCreated(address,address,address,address,address,uint256)": EventFragment;
    "Sold(address,uint256)": EventFragment;
    "TokenOnSaleWithdrawal(address,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "CapitalWithdrawal"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PriceChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ShopCreated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Sold"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TokenOnSaleWithdrawal"): EventFragment;
}

export interface CapitalWithdrawalEventObject {
  submitter: string;
  amount: BigNumber;
}
export type CapitalWithdrawalEvent = TypedEvent<
  [string, BigNumber],
  CapitalWithdrawalEventObject
>;

export type CapitalWithdrawalEventFilter =
  TypedEventFilter<CapitalWithdrawalEvent>;

export interface OwnershipTransferredEventObject {
  previousOwner: string;
  newOwner: string;
}
export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  OwnershipTransferredEventObject
>;

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>;

export interface PriceChangedEventObject {
  submitter: string;
  newPrice: BigNumber;
}
export type PriceChangedEvent = TypedEvent<
  [string, BigNumber],
  PriceChangedEventObject
>;

export type PriceChangedEventFilter = TypedEventFilter<PriceChangedEvent>;

export interface ShopCreatedEventObject {
  shopAddress: string;
  owner: string;
  membership: string;
  tokenUsedForPayement: string;
  tokenContract: string;
  price: BigNumber;
}
export type ShopCreatedEvent = TypedEvent<
  [string, string, string, string, string, BigNumber],
  ShopCreatedEventObject
>;

export type ShopCreatedEventFilter = TypedEventFilter<ShopCreatedEvent>;

export interface SoldEventObject {
  buyer: string;
  amount: BigNumber;
}
export type SoldEvent = TypedEvent<[string, BigNumber], SoldEventObject>;

export type SoldEventFilter = TypedEventFilter<SoldEvent>;

export interface TokenOnSaleWithdrawalEventObject {
  submitter: string;
  amount: BigNumber;
}
export type TokenOnSaleWithdrawalEvent = TypedEvent<
  [string, BigNumber],
  TokenOnSaleWithdrawalEventObject
>;

export type TokenOnSaleWithdrawalEventFilter =
  TypedEventFilter<TokenOnSaleWithdrawalEvent>;

export interface TokenShop extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: TokenShopInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    buyTokens(
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    crowdSaleOpen(overrides?: CallOverrides): Promise<[boolean]>;

    getContractBalanceOfToken(overrides?: CallOverrides): Promise<[BigNumber]>;

    getPrice(overrides?: CallOverrides): Promise<[BigNumber]>;

    membership(overrides?: CallOverrides): Promise<[string]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    price(overrides?: CallOverrides): Promise<[BigNumber]>;

    raisedCapital(overrides?: CallOverrides): Promise<[BigNumber]>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setCrowdSaleState(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setPrice(
      newPrice: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    tokenContract(overrides?: CallOverrides): Promise<[string]>;

    tokenUsedForPayement(overrides?: CallOverrides): Promise<[string]>;

    tokensBoughtByBuyer(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    withdrawRaisedCapital(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    withdrawTokensOnSale(
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  buyTokens(
    amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  crowdSaleOpen(overrides?: CallOverrides): Promise<boolean>;

  getContractBalanceOfToken(overrides?: CallOverrides): Promise<BigNumber>;

  getPrice(overrides?: CallOverrides): Promise<BigNumber>;

  membership(overrides?: CallOverrides): Promise<string>;

  owner(overrides?: CallOverrides): Promise<string>;

  price(overrides?: CallOverrides): Promise<BigNumber>;

  raisedCapital(overrides?: CallOverrides): Promise<BigNumber>;

  renounceOwnership(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setCrowdSaleState(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setPrice(
    newPrice: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  tokenContract(overrides?: CallOverrides): Promise<string>;

  tokenUsedForPayement(overrides?: CallOverrides): Promise<string>;

  tokensBoughtByBuyer(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  transferOwnership(
    newOwner: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  withdrawRaisedCapital(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  withdrawTokensOnSale(
    amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    buyTokens(
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[boolean, BigNumber]>;

    crowdSaleOpen(overrides?: CallOverrides): Promise<boolean>;

    getContractBalanceOfToken(overrides?: CallOverrides): Promise<BigNumber>;

    getPrice(overrides?: CallOverrides): Promise<BigNumber>;

    membership(overrides?: CallOverrides): Promise<string>;

    owner(overrides?: CallOverrides): Promise<string>;

    price(overrides?: CallOverrides): Promise<BigNumber>;

    raisedCapital(overrides?: CallOverrides): Promise<BigNumber>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    setCrowdSaleState(overrides?: CallOverrides): Promise<[boolean, boolean]>;

    setPrice(
      newPrice: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[boolean, BigNumber]>;

    tokenContract(overrides?: CallOverrides): Promise<string>;

    tokenUsedForPayement(overrides?: CallOverrides): Promise<string>;

    tokensBoughtByBuyer(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    withdrawRaisedCapital(overrides?: CallOverrides): Promise<boolean>;

    withdrawTokensOnSale(
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[boolean, BigNumber]>;
  };

  filters: {
    "CapitalWithdrawal(address,uint256)"(
      submitter?: null,
      amount?: null
    ): CapitalWithdrawalEventFilter;
    CapitalWithdrawal(
      submitter?: null,
      amount?: null
    ): CapitalWithdrawalEventFilter;

    "OwnershipTransferred(address,address)"(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnershipTransferredEventFilter;

    "PriceChanged(address,uint256)"(
      submitter?: null,
      newPrice?: null
    ): PriceChangedEventFilter;
    PriceChanged(submitter?: null, newPrice?: null): PriceChangedEventFilter;

    "ShopCreated(address,address,address,address,address,uint256)"(
      shopAddress?: null,
      owner?: null,
      membership?: null,
      tokenUsedForPayement?: null,
      tokenContract?: null,
      price?: null
    ): ShopCreatedEventFilter;
    ShopCreated(
      shopAddress?: null,
      owner?: null,
      membership?: null,
      tokenUsedForPayement?: null,
      tokenContract?: null,
      price?: null
    ): ShopCreatedEventFilter;

    "Sold(address,uint256)"(buyer?: null, amount?: null): SoldEventFilter;
    Sold(buyer?: null, amount?: null): SoldEventFilter;

    "TokenOnSaleWithdrawal(address,uint256)"(
      submitter?: null,
      amount?: null
    ): TokenOnSaleWithdrawalEventFilter;
    TokenOnSaleWithdrawal(
      submitter?: null,
      amount?: null
    ): TokenOnSaleWithdrawalEventFilter;
  };

  estimateGas: {
    buyTokens(
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    crowdSaleOpen(overrides?: CallOverrides): Promise<BigNumber>;

    getContractBalanceOfToken(overrides?: CallOverrides): Promise<BigNumber>;

    getPrice(overrides?: CallOverrides): Promise<BigNumber>;

    membership(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    price(overrides?: CallOverrides): Promise<BigNumber>;

    raisedCapital(overrides?: CallOverrides): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setCrowdSaleState(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setPrice(
      newPrice: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    tokenContract(overrides?: CallOverrides): Promise<BigNumber>;

    tokenUsedForPayement(overrides?: CallOverrides): Promise<BigNumber>;

    tokensBoughtByBuyer(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    withdrawRaisedCapital(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    withdrawTokensOnSale(
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    buyTokens(
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    crowdSaleOpen(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getContractBalanceOfToken(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getPrice(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    membership(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    price(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    raisedCapital(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setCrowdSaleState(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setPrice(
      newPrice: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    tokenContract(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    tokenUsedForPayement(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    tokensBoughtByBuyer(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    withdrawRaisedCapital(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    withdrawTokensOnSale(
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
