import rrdx, { AdvancedComponentDecorator as rrdxAdvancedComponentDecorator, AnyIfEmpty as rrdxAnyIfEmpty, Connect as rrdxConnect, ConnectProps as rrdxConnectProps, ConnectedProps as rrdxConnectedProps, DispatchProp as rrdxDispatchProp, DistributiveOmit as rrdxDistributiveOmit, EqualityFn as rrdxEqualityFn, FixTypeLater as rrdxFixTypeLater, GetLibraryManagedProps as rrdxGetLibraryManagedProps, GetProps as rrdxGetProps, HandleThunkActionCreator as rrdxHandleThunkActionCreator, InferThunkActionCreatorType as rrdxInferThunkActionCreatorType, InferableComponentEnhancer as rrdxInferableComponentEnhancer, InferableComponentEnhancerWithProps as rrdxInferableComponentEnhancerWithProps, MapDispatchToProps as rrdxMapDispatchToProps, MapDispatchToPropsFactory as rrdxMapDispatchToPropsFactory, MapDispatchToPropsFunction as rrdxMapDispatchToPropsFunction, MapDispatchToPropsNonObject as rrdxMapDispatchToPropsNonObject, MapDispatchToPropsParam as rrdxMapDispatchToPropsParam, MapStateToProps as rrdxMapStateToProps, MapStateToPropsFactory as rrdxMapStateToPropsFactory, MapStateToPropsParam as rrdxMapStateToPropsParam, Matching as rrdxMatching, MergeProps as rrdxMergeProps, ProviderProps as rrdxProviderProps, ReactReduxContextValue as rrdxReactReduxContextValue, ResolveThunks as rrdxResolveThunks, Selector as rrdxSelector, SelectorFactory as rrdxSelectorFactory, Shared as rrdxShared, Subscription as rrdxSubscription, TypedUseSelectorHook as rrdxTypedUseSelectorHook } from 'react-redux';
export declare type AdvancedComponentDecorator<TProps, TOwnProps> = rrdxAdvancedComponentDecorator<TProps, TOwnProps>;
export declare type AnyIfEmpty<T extends object> = rrdxAnyIfEmpty<T>;
export declare type Connect = rrdxConnect;
export declare type ConnectProps = rrdxConnectProps;
export declare type ConnectedProps<TConnector> = rrdxConnectedProps<TConnector>;
export declare type DispatchProp = rrdxDispatchProp;
export declare type DistributiveOmit<T, K extends keyof T> = rrdxDistributiveOmit<T, K>;
export declare type EqualityFn<T> = rrdxEqualityFn<T>;
export declare type FixTypeLater = rrdxFixTypeLater;
export declare type GetLibraryManagedProps<C> = rrdxGetLibraryManagedProps<C>;
export declare type GetProps<C> = rrdxGetProps<C>;
export declare type HandleThunkActionCreator<TActionCreator> = rrdxHandleThunkActionCreator<TActionCreator>;
export declare type InferThunkActionCreatorType<TActionCreator extends (...args: any[]) => any> = rrdxInferThunkActionCreatorType<TActionCreator>;
export declare type InferableComponentEnhancer<TInjectedProps> = rrdxInferableComponentEnhancer<TInjectedProps>;
export declare type InferableComponentEnhancerWithProps<TInjectedProps, TNeedsProps> = rrdxInferableComponentEnhancerWithProps<TInjectedProps, TNeedsProps>;
export declare type MapDispatchToProps<TDispatchProps, TOwnProps> = rrdxMapDispatchToProps<TDispatchProps, TOwnProps>;
export declare type MapDispatchToPropsFactory<TDispatchProps, TOwnProps> = rrdxMapDispatchToPropsFactory<TDispatchProps, TOwnProps>;
export declare type MapDispatchToPropsFunction<TDispatchProps, TOwnProps> = rrdxMapDispatchToPropsFunction<TDispatchProps, TOwnProps>;
export declare type MapDispatchToPropsNonObject<TDispatchProps, TOwnProps> = rrdxMapDispatchToPropsNonObject<TDispatchProps, TOwnProps>;
export declare type MapDispatchToPropsParam<TDispatchProps, TOwnProps> = rrdxMapDispatchToPropsParam<TDispatchProps, TOwnProps>;
export declare type MapStateToProps<TStateProps, TOwnProps, State> = rrdxMapStateToProps<TStateProps, TOwnProps, State>;
export declare type MapStateToPropsFactory<TStateProps, TOwnProps, State> = rrdxMapStateToPropsFactory<TStateProps, TOwnProps, State>;
export declare type MapStateToPropsParam<TStateProps, TOwnProps, State> = rrdxMapStateToPropsParam<TStateProps, TOwnProps, State>;
export declare type Matching<InjectedProps, DecorationTargetProps> = rrdxMatching<InjectedProps, DecorationTargetProps>;
export declare type MergeProps<TStateProps, TDispatchProps, TOwnProps, TMergedProps> = rrdxMergeProps<TStateProps, TDispatchProps, TOwnProps, TMergedProps>;
export declare let Provider: typeof rrdx.Provider;
export declare type ProviderProps = rrdxProviderProps;
export declare type ReactReduxContextValue = rrdxReactReduxContextValue;
export declare type ResolveThunks<TDispatchProps> = rrdxResolveThunks<TDispatchProps>;
export declare type Selector<S, TProps, TOwnProps = null> = rrdxSelector<S, TProps, TOwnProps>;
export declare type SelectorFactory<S, TProps, TOwnProps, TFactoryOptions> = rrdxSelectorFactory<S, TProps, TOwnProps, TFactoryOptions>;
export declare type Shared<InjectedProps, DecorationTargetProps> = rrdxShared<InjectedProps, DecorationTargetProps>;
export declare type Subscription = rrdxSubscription;
export declare type TypedUseSelectorHook<TState> = rrdxTypedUseSelectorHook<TState>;
export default rrdx;
