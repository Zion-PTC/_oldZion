import { Axios as axAxios, AxiosAdapter as axAxiosAdapter, AxiosBasicCredentials as axAxiosBasicCredentials, AxiosDefaults as axAxiosDefaults, AxiosError as axAxiosError, AxiosInstance as axAxiosInstance, AxiosInterceptorManager as axAxiosInterceptorManager, AxiosInterceptorOptions as axAxiosInterceptorOptions, AxiosPromise as axAxiosPromise, AxiosProxyConfig as axAxiosProxyConfig, AxiosRequestConfig as axAxiosRequestConfig, AxiosRequestHeaders as axAxiosRequestHeaders, AxiosRequestTransformer as axAxiosRequestTransformer, AxiosResponse as axAxiosResponse, AxiosResponseHeaders as axAxiosResponseHeaders, AxiosResponseTransformer as axAxiosResponseTransformer, AxiosStatic as axAxiosStatic, Cancel as axCancel, CancelStatic as axCancelStatic, CancelToken as axCancelToken, CancelTokenSource as axCancelTokenSource, CancelTokenStatic as axCancelTokenStatic, CanceledError as axCanceledError, Canceler as axCanceler, HeadersDefaults as axHeadersDefaults, Method as axMethod, ResponseType as axResponseType, responseEncoding as axresponseEncoding, TransitionalOptions as axTransitionalOptions } from 'axios';
export declare type Axios = axAxios;
export declare type AxiosAdapter = axAxiosAdapter;
export declare type AxiosBasicCredentials = axAxiosBasicCredentials;
export declare type AxiosDefaults = axAxiosDefaults;
export declare type AxiosError = axAxiosError;
export declare type AxiosInstance = axAxiosInstance;
export declare type AxiosInterceptorManager<V> = axAxiosInterceptorManager<V>;
export declare type AxiosInterceptorOptions = axAxiosInterceptorOptions;
export declare type AxiosPromise = axAxiosPromise;
export declare type AxiosProxyConfig = axAxiosProxyConfig;
export declare type AxiosRequestConfig = axAxiosRequestConfig;
export declare type AxiosRequestHeaders = axAxiosRequestHeaders;
export declare type AxiosRequestTransformer = axAxiosRequestTransformer;
export declare type AxiosResponse = axAxiosResponse;
export declare type AxiosResponseHeaders = axAxiosResponseHeaders;
export declare type AxiosResponseTransformer = axAxiosResponseTransformer;
export declare type AxiosStatic = axAxiosStatic;
export declare type Cancel = axCancel;
export declare type CancelStatic = axCancelStatic;
export declare type CancelToken = axCancelToken;
export declare type CancelTokenSource = axCancelTokenSource;
export declare type CancelTokenStatic = axCancelTokenStatic;
export declare type CanceledError<T> = axCanceledError<T>;
export declare type Canceler = axCanceler;
export declare type HeadersDefaults = axHeadersDefaults;
export declare type Method = axMethod;
export declare type ResponseType = axResponseType;
export declare type responseEncoding = axresponseEncoding;
export declare type TransitionalOptions = axTransitionalOptions;
declare let obj: {
    create: (config?: axAxiosRequestConfig<any>) => axAxiosInstance;
    defaults: axAxiosDefaults<any>;
    delete: <T = any, R = axAxiosResponse<T, any>, D = any>(url: string, config?: axAxiosRequestConfig<D>) => Promise<R>;
    get: <T_1 = any, R_1 = axAxiosResponse<T_1, any>, D_1 = any>(url: string, config?: axAxiosRequestConfig<D_1>) => Promise<R_1>;
    getUri: (config?: axAxiosRequestConfig<any>) => string;
    head: <T_2 = any, R_2 = axAxiosResponse<T_2, any>, D_2 = any>(url: string, config?: axAxiosRequestConfig<D_2>) => Promise<R_2>;
    interceptors: {
        request: axAxiosInterceptorManager<axAxiosRequestConfig<any>>;
        response: axAxiosInterceptorManager<axAxiosResponse<any, any>>;
    };
    isAxiosError: (payload: any) => payload is axAxiosError<unknown, any>;
    isCancel: (value: any) => boolean;
    options: <T_3 = any, R_3 = axAxiosResponse<T_3, any>, D_3 = any>(url: string, config?: axAxiosRequestConfig<D_3>) => Promise<R_3>;
    patch: <T_4 = any, R_4 = axAxiosResponse<T_4, any>, D_4 = any>(url: string, data?: D_4, config?: axAxiosRequestConfig<D_4>) => Promise<R_4>;
    patchForm: <T_5 = any, R_5 = axAxiosResponse<T_5, any>, D_5 = any>(url: string, data?: D_5, config?: axAxiosRequestConfig<D_5>) => Promise<R_5>;
    post: <T_6 = any, R_6 = axAxiosResponse<T_6, any>, D_6 = any>(url: string, data?: D_6, config?: axAxiosRequestConfig<D_6>) => Promise<R_6>;
    postForm: <T_7 = any, R_7 = axAxiosResponse<T_7, any>, D_7 = any>(url: string, data?: D_7, config?: axAxiosRequestConfig<D_7>) => Promise<R_7>;
    put: <T_8 = any, R_8 = axAxiosResponse<T_8, any>, D_8 = any>(url: string, data?: D_8, config?: axAxiosRequestConfig<D_8>) => Promise<R_8>;
    putForm: <T_9 = any, R_9 = axAxiosResponse<T_9, any>, D_9 = any>(url: string, data?: D_9, config?: axAxiosRequestConfig<D_9>) => Promise<R_9>;
    request: <T_10 = any, R_10 = axAxiosResponse<T_10, any>, D_10 = any>(config: axAxiosRequestConfig<D_10>) => Promise<R_10>;
    spread: <T_11, R_11>(callback: (...args: T_11[]) => R_11) => (array: T_11[]) => R_11;
    VERSION: string;
};
export default obj;
