/// <reference types="react" />
import rbs from 'react-bootstrap';
export declare let Accordion: import("react-bootstrap/esm/helpers").BsPrefixRefForwardingComponent<"div", rbs.AccordionProps> & {
    Button: import("react-bootstrap/esm/helpers").BsPrefixRefForwardingComponent<"div", rbs.AccordionButtonProps>;
    Collapse: import("react-bootstrap/esm/helpers").BsPrefixRefForwardingComponent<"div", rbs.AccordionCollapseProps>;
    Item: import("react-bootstrap/esm/helpers").BsPrefixRefForwardingComponent<"div", import("react-bootstrap/esm/AccordionItem").AccordionItemProps>;
    Header: import("react-bootstrap/esm/helpers").BsPrefixRefForwardingComponent<"h2", import("react-bootstrap/esm/AccordionHeader").AccordionHeaderProps>;
    Body: import("react-bootstrap/esm/helpers").BsPrefixRefForwardingComponent<"div", import("react-bootstrap/esm/AccordionBody").AccordionBodyProps>;
};
export declare let AccordionButton: import("react-bootstrap/esm/helpers").BsPrefixRefForwardingComponent<"div", rbs.AccordionButtonProps>;
export declare type AccordionButtonProps = rbs.AccordionButtonProps;
export declare let AccordionCollapse: import("react-bootstrap/esm/helpers").BsPrefixRefForwardingComponent<"div", rbs.AccordionCollapseProps>;
export declare type AccordionCollapseProps = rbs.AccordionCollapseProps;
export declare let AccordionContext: import("react").Context<import("react-bootstrap/esm/AccordionContext").AccordionContextValue>;
export declare type AccordionProps = rbs.AccordionProps;
export declare let Alert: import("react").ForwardRefExoticComponent<rbs.AlertProps & import("react").RefAttributes<HTMLDivElement>> & {
    Link: import("react-bootstrap/esm/helpers").BsPrefixRefForwardingComponent<import("react").ForwardRefExoticComponent<rbs.AnchorProps & import("react").RefAttributes<HTMLAnchorElement>>, unknown>;
    Heading: import("react-bootstrap/esm/helpers").BsPrefixRefForwardingComponent<import("react").ForwardRefExoticComponent<Pick<import("react").DetailedHTMLProps<import("react").HTMLAttributes<HTMLDivElement>, HTMLDivElement>, "key" | keyof import("react").HTMLAttributes<HTMLDivElement>> & import("react").RefAttributes<HTMLDivElement>>, unknown>;
};
export declare type AlertProps = rbs.AlertProps;
export declare let Anchor: import("react").ForwardRefExoticComponent<rbs.AnchorProps & import("react").RefAttributes<HTMLAnchorElement>>;
export declare type AnchorProps = rbs.AnchorProps;
export declare let Badge: import("react-bootstrap/esm/helpers").BsPrefixRefForwardingComponent<"span", rbs.BadgeProps>;
export declare type BadgeProps = rbs.BadgeProps;
export declare let Breadcrumb: import("react-bootstrap/esm/helpers").BsPrefixRefForwardingComponent<"nav", rbs.BreadcrumbProps> & {
    Item: import("react-bootstrap/esm/helpers").BsPrefixRefForwardingComponent<"li", rbs.BreadcrumbItemProps>;
};
export declare type BreadcrumbProps = rbs.BreadcrumbProps;
export declare let BreadcrumbItem: import("react-bootstrap/esm/helpers").BsPrefixRefForwardingComponent<"li", rbs.BreadcrumbItemProps>;
export declare type BreadcrumbItemProps = rbs.BreadcrumbItemProps;
export declare type ButtonGroupProps = rbs.ButtonGroupProps;
export declare let Button: import("react-bootstrap/esm/helpers").BsPrefixRefForwardingComponent<"button", rbs.ButtonProps>;
export declare type ButtonProps = rbs.ButtonProps;
export declare let ButtonGroup: import("react-bootstrap/esm/helpers").BsPrefixRefForwardingComponent<"div", rbs.ButtonGroupProps>;
export declare let ButtonToolbar: import("react").ForwardRefExoticComponent<rbs.ButtonToolbarProps & import("react").RefAttributes<HTMLDivElement>>;
export declare type ButtonToolbarProps = rbs.ButtonToolbarProps;
export declare let Card: import("react-bootstrap/esm/helpers").BsPrefixRefForwardingComponent<"div", rbs.CardProps> & {
    Img: import("react-bootstrap/esm/helpers").BsPrefixRefForwardingComponent<"img", rbs.CardImgProps>;
    Title: import("react-bootstrap/esm/helpers").BsPrefixRefForwardingComponent<import("react").ForwardRefExoticComponent<Pick<import("react").DetailedHTMLProps<import("react").HTMLAttributes<HTMLDivElement>, HTMLDivElement>, "key" | keyof import("react").HTMLAttributes<HTMLDivElement>> & import("react").RefAttributes<HTMLDivElement>>, unknown>;
    Subtitle: import("react-bootstrap/esm/helpers").BsPrefixRefForwardingComponent<import("react").ForwardRefExoticComponent<Pick<import("react").DetailedHTMLProps<import("react").HTMLAttributes<HTMLDivElement>, HTMLDivElement>, "key" | keyof import("react").HTMLAttributes<HTMLDivElement>> & import("react").RefAttributes<HTMLDivElement>>, unknown>;
    Body: import("react-bootstrap/esm/helpers").BsPrefixRefForwardingComponent<"div", unknown>;
    Link: import("react-bootstrap/esm/helpers").BsPrefixRefForwardingComponent<"a", unknown>;
    Text: import("react-bootstrap/esm/helpers").BsPrefixRefForwardingComponent<"p", unknown>;
    Header: import("react-bootstrap/esm/helpers").BsPrefixRefForwardingComponent<"div", import("react-bootstrap/esm/CardHeader").CardHeaderProps>;
    Footer: import("react-bootstrap/esm/helpers").BsPrefixRefForwardingComponent<"div", unknown>;
    ImgOverlay: import("react-bootstrap/esm/helpers").BsPrefixRefForwardingComponent<"div", unknown>;
};
export declare type CardProps = rbs.CardProps;
export declare let CardGroup: import("react-bootstrap/esm/helpers").BsPrefixRefForwardingComponent<"div", unknown>;
export declare let CardImg: import("react-bootstrap/esm/helpers").BsPrefixRefForwardingComponent<"img", rbs.CardImgProps>;
export declare type CardImgProps = rbs.CardImgProps;
export declare let Carousel: import("react-bootstrap/esm/helpers").BsPrefixRefForwardingComponent<"div", rbs.CarouselProps> & {
    Caption: import("react-bootstrap/esm/helpers").BsPrefixRefForwardingComponent<"div", unknown>;
    Item: import("react-bootstrap/esm/helpers").BsPrefixRefForwardingComponent<"div", rbs.CarouselItemProps>;
};
export declare type CarouselProps = rbs.CarouselProps;
export declare let CarouselItem: import("react-bootstrap/esm/helpers").BsPrefixRefForwardingComponent<"div", rbs.CarouselItemProps>;
export declare type CarouselItemProps = rbs.CarouselItemProps;
export declare let CloseButton: import("react").ForwardRefExoticComponent<rbs.CloseButtonProps & import("react").RefAttributes<HTMLButtonElement>>;
export declare type CloseButtonProps = rbs.CloseButtonProps;
export declare let Col: import("react-bootstrap/esm/helpers").BsPrefixRefForwardingComponent<"div", rbs.ColProps>;
export declare type ColProps = rbs.ColProps;
export declare let Collapse: import("react").ForwardRefExoticComponent<rbs.CollapseProps & import("react").RefAttributes<import("react-transition-group/Transition").default<any>>>;
export declare type CollapseProps = rbs.CollapseProps;
export declare let Container: import("react-bootstrap/esm/helpers").BsPrefixRefForwardingComponent<"div", rbs.ContainerProps>;
export declare type ContainerProps = rbs.ContainerProps;
export declare let Dropdown: import("react-bootstrap/esm/helpers").BsPrefixRefForwardingComponent<"div", rbs.DropdownProps> & {
    Toggle: import("react-bootstrap/esm/helpers").BsPrefixRefForwardingComponent<"button", import("react-bootstrap/esm/DropdownToggle").DropdownToggleProps>;
    Menu: import("react-bootstrap/esm/helpers").BsPrefixRefForwardingComponent<"div", import("react-bootstrap/esm/DropdownMenu").DropdownMenuProps>;
    Item: import("react-bootstrap/esm/helpers").BsPrefixRefForwardingComponent<import("@restart/ui/esm/types").DynamicRefForwardingComponent<import("react").ForwardRefExoticComponent<import("@restart/ui/esm/Button").ButtonProps & import("react").RefAttributes<HTMLElement>>, import("@restart/ui/esm/DropdownItem").DropdownItemProps>, import("react-bootstrap/esm/DropdownItem").DropdownItemProps>;
    ItemText: import("react-bootstrap/esm/helpers").BsPrefixRefForwardingComponent<"span", unknown>;
    Divider: import("react-bootstrap/esm/helpers").BsPrefixRefForwardingComponent<"hr", unknown>;
    Header: import("react-bootstrap/esm/helpers").BsPrefixRefForwardingComponent<"div", unknown>;
};
export declare type DropdownButtonProps = rbs.DropdownButtonProps;
export declare let DropdownButton: import("react-bootstrap/esm/helpers").BsPrefixRefForwardingComponent<"div", rbs.DropdownButtonProps>;
export declare type DropdownProps = rbs.DropdownProps;
export declare let Fade: import("react").ForwardRefExoticComponent<rbs.FadeProps & import("react").RefAttributes<import("react-transition-group/Transition").default<any>>>;
export declare type FadeProps = rbs.FadeProps;
export declare let Figure: import("react-bootstrap/esm/helpers").BsPrefixRefForwardingComponent<"figure", unknown> & {
    Image: import("react").ForwardRefExoticComponent<rbs.ImageProps & import("react").RefAttributes<HTMLImageElement>>;
    Caption: import("react-bootstrap/esm/helpers").BsPrefixRefForwardingComponent<"figcaption", unknown>;
};
export declare type FloatingLabelProps = rbs.FloatingLabelProps;
export declare let FloatingLabel: import("react-bootstrap/esm/helpers").BsPrefixRefForwardingComponent<"div", rbs.FloatingLabelProps>;
export declare let Form: import("react-bootstrap/esm/helpers").BsPrefixRefForwardingComponent<"form", rbs.FormProps> & {
    Group: import("react-bootstrap/esm/helpers").BsPrefixRefForwardingComponent<"div", rbs.FormGroupProps>;
    Control: import("react-bootstrap/esm/helpers").BsPrefixRefForwardingComponent<"input", rbs.FormControlProps> & {
        Feedback: import("react-bootstrap/esm/helpers").BsPrefixRefForwardingComponent<"div", import("react-bootstrap/esm/Feedback").FeedbackProps>;
    };
    Floating: import("react-bootstrap/esm/helpers").BsPrefixRefForwardingComponent<"div", unknown>;
    Check: import("react-bootstrap/esm/helpers").BsPrefixRefForwardingComponent<"input", rbs.FormCheckProps> & {
        Input: import("react-bootstrap/esm/helpers").BsPrefixRefForwardingComponent<"input", import("react-bootstrap/esm/FormCheckInput").FormCheckInputProps>;
        Label: import("react").ForwardRefExoticComponent<import("react-bootstrap/esm/FormCheckLabel").FormCheckLabelProps & import("react").RefAttributes<HTMLLabelElement>>;
    };
    Switch: import("react-bootstrap/esm/helpers").BsPrefixRefForwardingComponent<import("react-bootstrap/esm/helpers").BsPrefixRefForwardingComponent<"input", rbs.FormCheckProps> & {
        Input: import("react-bootstrap/esm/helpers").BsPrefixRefForwardingComponent<"input", import("react-bootstrap/esm/FormCheckInput").FormCheckInputProps>;
        Label: import("react").ForwardRefExoticComponent<import("react-bootstrap/esm/FormCheckLabel").FormCheckLabelProps & import("react").RefAttributes<HTMLLabelElement>>;
    }, {
        className?: string;
        autoFocus?: boolean;
        disabled?: boolean;
        form?: string;
        formAction?: string;
        formEncType?: string;
        formMethod?: string;
        formNoValidate?: boolean;
        formTarget?: string;
        name?: string;
        value?: string | number | readonly string[];
        defaultChecked?: boolean;
        defaultValue?: string | number | readonly string[];
        suppressContentEditableWarning?: boolean;
        suppressHydrationWarning?: boolean;
        accessKey?: string;
        contentEditable?: boolean | "true" | "false" | "inherit";
        contextMenu?: string;
        dir?: string;
        draggable?: boolean | "true" | "false";
        hidden?: boolean;
        id?: string;
        lang?: string;
        placeholder?: string;
        slot?: string;
        spellCheck?: boolean | "true" | "false";
        style?: import("react").CSSProperties;
        tabIndex?: number;
        title?: string;
        translate?: "yes" | "no";
        radioGroup?: string;
        role?: import("react").AriaRole;
        about?: string;
        datatype?: string;
        inlist?: any;
        prefix?: string;
        property?: string;
        resource?: string;
        typeof?: string;
        vocab?: string;
        autoCapitalize?: string;
        autoCorrect?: string;
        autoSave?: string;
        color?: string;
        itemProp?: string;
        itemScope?: boolean;
        itemType?: string;
        itemID?: string;
        itemRef?: string;
        results?: number;
        security?: string;
        unselectable?: "on" | "off";
        inputMode?: "text" | "none" | "search" | "tel" | "url" | "email" | "numeric" | "decimal";
        is?: string;
        'aria-activedescendant'?: string;
        'aria-atomic'?: boolean | "true" | "false";
        'aria-autocomplete'?: "list" | "none" | "inline" | "both";
        'aria-busy'?: boolean | "true" | "false";
        'aria-checked'?: boolean | "true" | "false" | "mixed";
        'aria-colcount'?: number;
        'aria-colindex'?: number;
        'aria-colspan'?: number;
        'aria-controls'?: string;
        'aria-current'?: boolean | "time" | "true" | "false" | "page" | "step" | "location" | "date";
        'aria-describedby'?: string;
        'aria-details'?: string;
        'aria-disabled'?: boolean | "true" | "false";
        'aria-dropeffect'?: "link" | "none" | "copy" | "execute" | "move" | "popup";
        'aria-errormessage'?: string;
        'aria-expanded'?: boolean | "true" | "false";
        'aria-flowto'?: string;
        'aria-grabbed'?: boolean | "true" | "false";
        'aria-haspopup'?: boolean | "dialog" | "menu" | "true" | "false" | "grid" | "listbox" | "tree";
        'aria-hidden'?: boolean | "true" | "false";
        'aria-invalid'?: boolean | "true" | "false" | "grammar" | "spelling";
        'aria-keyshortcuts'?: string;
        'aria-label'?: string;
        'aria-labelledby'?: string;
        'aria-level'?: number;
        'aria-live'?: "off" | "assertive" | "polite";
        'aria-modal'?: boolean | "true" | "false";
        'aria-multiline'?: boolean | "true" | "false";
        'aria-multiselectable'?: boolean | "true" | "false";
        'aria-orientation'?: "horizontal" | "vertical";
        'aria-owns'?: string;
        'aria-placeholder'?: string;
        'aria-posinset'?: number;
        'aria-pressed'?: boolean | "true" | "false" | "mixed";
        'aria-readonly'?: boolean | "true" | "false";
        'aria-relevant'?: "text" | "additions" | "additions removals" | "additions text" | "all" | "removals" | "removals additions" | "removals text" | "text additions" | "text removals";
        'aria-required'?: boolean | "true" | "false";
        'aria-roledescription'?: string;
        'aria-rowcount'?: number;
        'aria-rowindex'?: number;
        'aria-rowspan'?: number;
        'aria-selected'?: boolean | "true" | "false";
        'aria-setsize'?: number;
        'aria-sort'?: "none" | "ascending" | "descending" | "other";
        'aria-valuemax'?: number;
        'aria-valuemin'?: number;
        'aria-valuenow'?: number;
        'aria-valuetext'?: string;
        children?: import("react").ReactNode;
        dangerouslySetInnerHTML?: {
            __html: string;
        };
        onCopy?: import("react").ClipboardEventHandler<HTMLInputElement>;
        onCopyCapture?: import("react").ClipboardEventHandler<HTMLInputElement>;
        onCut?: import("react").ClipboardEventHandler<HTMLInputElement>;
        onCutCapture?: import("react").ClipboardEventHandler<HTMLInputElement>;
        onPaste?: import("react").ClipboardEventHandler<HTMLInputElement>;
        onPasteCapture?: import("react").ClipboardEventHandler<HTMLInputElement>;
        onCompositionEnd?: import("react").CompositionEventHandler<HTMLInputElement>;
        onCompositionEndCapture?: import("react").CompositionEventHandler<HTMLInputElement>;
        onCompositionStart?: import("react").CompositionEventHandler<HTMLInputElement>;
        onCompositionStartCapture?: import("react").CompositionEventHandler<HTMLInputElement>;
        onCompositionUpdate?: import("react").CompositionEventHandler<HTMLInputElement>;
        onCompositionUpdateCapture?: import("react").CompositionEventHandler<HTMLInputElement>;
        onFocus?: import("react").FocusEventHandler<HTMLInputElement>;
        onFocusCapture?: import("react").FocusEventHandler<HTMLInputElement>;
        onBlur?: import("react").FocusEventHandler<HTMLInputElement>;
        onBlurCapture?: import("react").FocusEventHandler<HTMLInputElement>;
        onChange?: import("react").ChangeEventHandler<HTMLInputElement>;
        onChangeCapture?: import("react").FormEventHandler<HTMLInputElement>;
        onBeforeInput?: import("react").FormEventHandler<HTMLInputElement>;
        onBeforeInputCapture?: import("react").FormEventHandler<HTMLInputElement>;
        onInput?: import("react").FormEventHandler<HTMLInputElement>;
        onInputCapture?: import("react").FormEventHandler<HTMLInputElement>;
        onReset?: import("react").FormEventHandler<HTMLInputElement>;
        onResetCapture?: import("react").FormEventHandler<HTMLInputElement>;
        onSubmit?: import("react").FormEventHandler<HTMLInputElement>;
        onSubmitCapture?: import("react").FormEventHandler<HTMLInputElement>;
        onInvalid?: import("react").FormEventHandler<HTMLInputElement>;
        onInvalidCapture?: import("react").FormEventHandler<HTMLInputElement>;
        onLoad?: import("react").ReactEventHandler<HTMLInputElement>;
        onLoadCapture?: import("react").ReactEventHandler<HTMLInputElement>;
        onError?: import("react").ReactEventHandler<HTMLInputElement>;
        onErrorCapture?: import("react").ReactEventHandler<HTMLInputElement>;
        onKeyDown?: import("react").KeyboardEventHandler<HTMLInputElement>;
        onKeyDownCapture?: import("react").KeyboardEventHandler<HTMLInputElement>;
        onKeyPress?: import("react").KeyboardEventHandler<HTMLInputElement>;
        onKeyPressCapture?: import("react").KeyboardEventHandler<HTMLInputElement>;
        onKeyUp?: import("react").KeyboardEventHandler<HTMLInputElement>;
        onKeyUpCapture?: import("react").KeyboardEventHandler<HTMLInputElement>;
        onAbort?: import("react").ReactEventHandler<HTMLInputElement>;
        onAbortCapture?: import("react").ReactEventHandler<HTMLInputElement>;
        onCanPlay?: import("react").ReactEventHandler<HTMLInputElement>;
        onCanPlayCapture?: import("react").ReactEventHandler<HTMLInputElement>;
        onCanPlayThrough?: import("react").ReactEventHandler<HTMLInputElement>;
        onCanPlayThroughCapture?: import("react").ReactEventHandler<HTMLInputElement>;
        onDurationChange?: import("react").ReactEventHandler<HTMLInputElement>;
        onDurationChangeCapture?: import("react").ReactEventHandler<HTMLInputElement>;
        onEmptied?: import("react").ReactEventHandler<HTMLInputElement>;
        onEmptiedCapture?: import("react").ReactEventHandler<HTMLInputElement>;
        onEncrypted?: import("react").ReactEventHandler<HTMLInputElement>;
        onEncryptedCapture?: import("react").ReactEventHandler<HTMLInputElement>;
        onEnded?: import("react").ReactEventHandler<HTMLInputElement>;
        onEndedCapture?: import("react").ReactEventHandler<HTMLInputElement>;
        onLoadedData?: import("react").ReactEventHandler<HTMLInputElement>;
        onLoadedDataCapture?: import("react").ReactEventHandler<HTMLInputElement>;
        onLoadedMetadata?: import("react").ReactEventHandler<HTMLInputElement>;
        onLoadedMetadataCapture?: import("react").ReactEventHandler<HTMLInputElement>;
        onLoadStart?: import("react").ReactEventHandler<HTMLInputElement>;
        onLoadStartCapture?: import("react").ReactEventHandler<HTMLInputElement>;
        onPause?: import("react").ReactEventHandler<HTMLInputElement>;
        onPauseCapture?: import("react").ReactEventHandler<HTMLInputElement>;
        onPlay?: import("react").ReactEventHandler<HTMLInputElement>;
        onPlayCapture?: import("react").ReactEventHandler<HTMLInputElement>;
        onPlaying?: import("react").ReactEventHandler<HTMLInputElement>;
        onPlayingCapture?: import("react").ReactEventHandler<HTMLInputElement>;
        onProgress?: import("react").ReactEventHandler<HTMLInputElement>;
        onProgressCapture?: import("react").ReactEventHandler<HTMLInputElement>;
        onRateChange?: import("react").ReactEventHandler<HTMLInputElement>;
        onRateChangeCapture?: import("react").ReactEventHandler<HTMLInputElement>;
        onSeeked?: import("react").ReactEventHandler<HTMLInputElement>;
        onSeekedCapture?: import("react").ReactEventHandler<HTMLInputElement>;
        onSeeking?: import("react").ReactEventHandler<HTMLInputElement>;
        onSeekingCapture?: import("react").ReactEventHandler<HTMLInputElement>;
        onStalled?: import("react").ReactEventHandler<HTMLInputElement>;
        onStalledCapture?: import("react").ReactEventHandler<HTMLInputElement>;
        onSuspend?: import("react").ReactEventHandler<HTMLInputElement>;
        onSuspendCapture?: import("react").ReactEventHandler<HTMLInputElement>;
        onTimeUpdate?: import("react").ReactEventHandler<HTMLInputElement>;
        onTimeUpdateCapture?: import("react").ReactEventHandler<HTMLInputElement>;
        onVolumeChange?: import("react").ReactEventHandler<HTMLInputElement>;
        onVolumeChangeCapture?: import("react").ReactEventHandler<HTMLInputElement>;
        onWaiting?: import("react").ReactEventHandler<HTMLInputElement>;
        onWaitingCapture?: import("react").ReactEventHandler<HTMLInputElement>;
        onAuxClick?: import("react").MouseEventHandler<HTMLInputElement>;
        onAuxClickCapture?: import("react").MouseEventHandler<HTMLInputElement>;
        onClick?: import("react").MouseEventHandler<HTMLInputElement>;
        onClickCapture?: import("react").MouseEventHandler<HTMLInputElement>;
        onContextMenu?: import("react").MouseEventHandler<HTMLInputElement>;
        onContextMenuCapture?: import("react").MouseEventHandler<HTMLInputElement>;
        onDoubleClick?: import("react").MouseEventHandler<HTMLInputElement>;
        onDoubleClickCapture?: import("react").MouseEventHandler<HTMLInputElement>;
        onDrag?: import("react").DragEventHandler<HTMLInputElement>;
        onDragCapture?: import("react").DragEventHandler<HTMLInputElement>;
        onDragEnd?: import("react").DragEventHandler<HTMLInputElement>;
        onDragEndCapture?: import("react").DragEventHandler<HTMLInputElement>;
        onDragEnter?: import("react").DragEventHandler<HTMLInputElement>;
        onDragEnterCapture?: import("react").DragEventHandler<HTMLInputElement>;
        onDragExit?: import("react").DragEventHandler<HTMLInputElement>;
        onDragExitCapture?: import("react").DragEventHandler<HTMLInputElement>;
        onDragLeave?: import("react").DragEventHandler<HTMLInputElement>;
        onDragLeaveCapture?: import("react").DragEventHandler<HTMLInputElement>;
        onDragOver?: import("react").DragEventHandler<HTMLInputElement>;
        onDragOverCapture?: import("react").DragEventHandler<HTMLInputElement>;
        onDragStart?: import("react").DragEventHandler<HTMLInputElement>;
        onDragStartCapture?: import("react").DragEventHandler<HTMLInputElement>;
        onDrop?: import("react").DragEventHandler<HTMLInputElement>;
        onDropCapture?: import("react").DragEventHandler<HTMLInputElement>;
        onMouseDown?: import("react").MouseEventHandler<HTMLInputElement>;
        onMouseDownCapture?: import("react").MouseEventHandler<HTMLInputElement>;
        onMouseEnter?: import("react").MouseEventHandler<HTMLInputElement>;
        onMouseLeave?: import("react").MouseEventHandler<HTMLInputElement>;
        onMouseMove?: import("react").MouseEventHandler<HTMLInputElement>;
        onMouseMoveCapture?: import("react").MouseEventHandler<HTMLInputElement>;
        onMouseOut?: import("react").MouseEventHandler<HTMLInputElement>;
        onMouseOutCapture?: import("react").MouseEventHandler<HTMLInputElement>;
        onMouseOver?: import("react").MouseEventHandler<HTMLInputElement>;
        onMouseOverCapture?: import("react").MouseEventHandler<HTMLInputElement>;
        onMouseUp?: import("react").MouseEventHandler<HTMLInputElement>;
        onMouseUpCapture?: import("react").MouseEventHandler<HTMLInputElement>;
        onSelect?: import("react").ReactEventHandler<HTMLInputElement>;
        onSelectCapture?: import("react").ReactEventHandler<HTMLInputElement>;
        onTouchCancel?: import("react").TouchEventHandler<HTMLInputElement>;
        onTouchCancelCapture?: import("react").TouchEventHandler<HTMLInputElement>;
        onTouchEnd?: import("react").TouchEventHandler<HTMLInputElement>;
        onTouchEndCapture?: import("react").TouchEventHandler<HTMLInputElement>;
        onTouchMove?: import("react").TouchEventHandler<HTMLInputElement>;
        onTouchMoveCapture?: import("react").TouchEventHandler<HTMLInputElement>;
        onTouchStart?: import("react").TouchEventHandler<HTMLInputElement>;
        onTouchStartCapture?: import("react").TouchEventHandler<HTMLInputElement>;
        onPointerDown?: import("react").PointerEventHandler<HTMLInputElement>;
        onPointerDownCapture?: import("react").PointerEventHandler<HTMLInputElement>;
        onPointerMove?: import("react").PointerEventHandler<HTMLInputElement>;
        onPointerMoveCapture?: import("react").PointerEventHandler<HTMLInputElement>;
        onPointerUp?: import("react").PointerEventHandler<HTMLInputElement>;
        onPointerUpCapture?: import("react").PointerEventHandler<HTMLInputElement>;
        onPointerCancel?: import("react").PointerEventHandler<HTMLInputElement>;
        onPointerCancelCapture?: import("react").PointerEventHandler<HTMLInputElement>;
        onPointerEnter?: import("react").PointerEventHandler<HTMLInputElement>;
        onPointerEnterCapture?: import("react").PointerEventHandler<HTMLInputElement>;
        onPointerLeave?: import("react").PointerEventHandler<HTMLInputElement>;
        onPointerLeaveCapture?: import("react").PointerEventHandler<HTMLInputElement>;
        onPointerOver?: import("react").PointerEventHandler<HTMLInputElement>;
        onPointerOverCapture?: import("react").PointerEventHandler<HTMLInputElement>;
        onPointerOut?: import("react").PointerEventHandler<HTMLInputElement>;
        onPointerOutCapture?: import("react").PointerEventHandler<HTMLInputElement>;
        onGotPointerCapture?: import("react").PointerEventHandler<HTMLInputElement>;
        onGotPointerCaptureCapture?: import("react").PointerEventHandler<HTMLInputElement>;
        onLostPointerCapture?: import("react").PointerEventHandler<HTMLInputElement>;
        onLostPointerCaptureCapture?: import("react").PointerEventHandler<HTMLInputElement>;
        onScroll?: import("react").UIEventHandler<HTMLInputElement>;
        onScrollCapture?: import("react").UIEventHandler<HTMLInputElement>;
        onWheel?: import("react").WheelEventHandler<HTMLInputElement>;
        onWheelCapture?: import("react").WheelEventHandler<HTMLInputElement>;
        onAnimationStart?: import("react").AnimationEventHandler<HTMLInputElement>;
        onAnimationStartCapture?: import("react").AnimationEventHandler<HTMLInputElement>;
        onAnimationEnd?: import("react").AnimationEventHandler<HTMLInputElement>;
        onAnimationEndCapture?: import("react").AnimationEventHandler<HTMLInputElement>;
        onAnimationIteration?: import("react").AnimationEventHandler<HTMLInputElement>;
        onAnimationIterationCapture?: import("react").AnimationEventHandler<HTMLInputElement>;
        onTransitionEnd?: import("react").TransitionEventHandler<HTMLInputElement>;
        onTransitionEndCapture?: import("react").TransitionEventHandler<HTMLInputElement>;
        label?: import("react").ReactNode;
        pattern?: string;
        list?: string;
        inline?: boolean;
        step?: string | number;
        bsPrefix?: string;
        height?: string | number;
        width?: string | number;
        size?: number;
        multiple?: boolean;
        as?: import("react").ElementType<any>;
        autoComplete?: string;
        alt?: string;
        accept?: string;
        capture?: boolean | "user" | "environment";
        checked?: boolean;
        maxLength?: number;
        minLength?: number;
        src?: string;
        max?: string | number;
        min?: string | number;
        crossOrigin?: string;
        enterKeyHint?: "search" | "next" | "enter" | "done" | "go" | "previous" | "send";
        readOnly?: boolean;
        required?: boolean;
        feedback?: import("react").ReactNode;
        isValid?: boolean;
        isInvalid?: boolean;
        feedbackTooltip?: boolean;
        feedbackType?: import("react-bootstrap/esm/Feedback").FeedbackType;
        bsSwitchPrefix?: string;
    }> & {
        Input: import("react-bootstrap/esm/helpers").BsPrefixRefForwardingComponent<"input", import("react-bootstrap/esm/FormCheckInput").FormCheckInputProps>;
        Label: import("react").ForwardRefExoticComponent<import("react-bootstrap/esm/FormCheckLabel").FormCheckLabelProps & import("react").RefAttributes<HTMLLabelElement>>;
    };
    Label: import("react-bootstrap/esm/helpers").BsPrefixRefForwardingComponent<"label", rbs.FormLabelProps>;
    Text: import("react-bootstrap/esm/helpers").BsPrefixRefForwardingComponent<"small", rbs.FormTextProps>;
    Range: import("react").ForwardRefExoticComponent<import("react-bootstrap/esm/FormRange").FormRangeProps & import("react").RefAttributes<HTMLInputElement>>;
    Select: import("react-bootstrap/esm/helpers").BsPrefixRefForwardingComponent<"select", rbs.FormSelectProps>;
    FloatingLabel: import("react-bootstrap/esm/helpers").BsPrefixRefForwardingComponent<"div", rbs.FloatingLabelProps>;
};
export declare let FormCheck: import("react-bootstrap/esm/helpers").BsPrefixRefForwardingComponent<"input", rbs.FormCheckProps> & {
    Input: import("react-bootstrap/esm/helpers").BsPrefixRefForwardingComponent<"input", import("react-bootstrap/esm/FormCheckInput").FormCheckInputProps>;
    Label: import("react").ForwardRefExoticComponent<import("react-bootstrap/esm/FormCheckLabel").FormCheckLabelProps & import("react").RefAttributes<HTMLLabelElement>>;
};
export declare type FormCheckProps = rbs.FormCheckProps;
export declare let FormControl: import("react-bootstrap/esm/helpers").BsPrefixRefForwardingComponent<"input", rbs.FormControlProps> & {
    Feedback: import("react-bootstrap/esm/helpers").BsPrefixRefForwardingComponent<"div", import("react-bootstrap/esm/Feedback").FeedbackProps>;
};
export declare type FormControlProps = rbs.FormControlProps;
export declare let FormFloating: import("react-bootstrap/esm/helpers").BsPrefixRefForwardingComponent<"div", unknown>;
export declare let FormGroup: import("react-bootstrap/esm/helpers").BsPrefixRefForwardingComponent<"div", rbs.FormGroupProps>;
export declare type FormGroupProps = rbs.FormGroupProps;
export declare let FormLabel: import("react-bootstrap/esm/helpers").BsPrefixRefForwardingComponent<"label", rbs.FormLabelProps>;
export declare type FormLabelProps = rbs.FormLabelProps;
export declare type FormProps = rbs.FormProps;
export declare let FormSelect: import("react-bootstrap/esm/helpers").BsPrefixRefForwardingComponent<"select", rbs.FormSelectProps>;
export declare type FormSelectProps = rbs.FormSelectProps;
export declare let FormText: import("react-bootstrap/esm/helpers").BsPrefixRefForwardingComponent<"small", rbs.FormTextProps>;
export declare type FormTextProps = rbs.FormTextProps;
export declare let Image: import("react").ForwardRefExoticComponent<rbs.ImageProps & import("react").RefAttributes<HTMLImageElement>>;
export declare type ImageProps = rbs.ImageProps;
export declare let InputGroup: import("react-bootstrap/esm/helpers").BsPrefixRefForwardingComponent<"div", rbs.InputGroupProps> & {
    Text: import("react-bootstrap/esm/helpers").BsPrefixRefForwardingComponent<"span", unknown>;
    Radio: (props: any) => JSX.Element;
    Checkbox: (props: any) => JSX.Element;
};
export declare type InputGroupProps = rbs.InputGroupProps;
export declare let ListGroup: import("react-bootstrap/esm/helpers").BsPrefixRefForwardingComponent<"div", rbs.ListGroupProps> & {
    Item: import("react-bootstrap/esm/helpers").BsPrefixRefForwardingComponent<"a", rbs.ListGroupItemProps>;
};
export declare type ListGroupItemProps = rbs.ListGroupItemProps;
export declare let ListGroupItem: import("react-bootstrap/esm/helpers").BsPrefixRefForwardingComponent<"a", rbs.ListGroupItemProps>;
export declare type ListGroupProps = rbs.ListGroupProps;
export declare let Modal: import("react-bootstrap/esm/helpers").BsPrefixRefForwardingComponent<"div", rbs.ModalProps> & {
    Body: import("react-bootstrap/esm/helpers").BsPrefixRefForwardingComponent<"div", unknown>;
    Header: import("react").ForwardRefExoticComponent<rbs.ModalHeaderProps & import("react").RefAttributes<HTMLDivElement>>;
    Title: import("react-bootstrap/esm/helpers").BsPrefixRefForwardingComponent<import("react").ForwardRefExoticComponent<Pick<import("react").DetailedHTMLProps<import("react").HTMLAttributes<HTMLDivElement>, HTMLDivElement>, "key" | keyof import("react").HTMLAttributes<HTMLDivElement>> & import("react").RefAttributes<HTMLDivElement>>, unknown>;
    Footer: import("react-bootstrap/esm/helpers").BsPrefixRefForwardingComponent<"div", unknown>;
    Dialog: import("react").ForwardRefExoticComponent<rbs.ModalDialogProps & import("react").RefAttributes<HTMLDivElement>>;
    TRANSITION_DURATION: number;
    BACKDROP_TRANSITION_DURATION: number;
};
export declare type ModalDialogProps = rbs.ModalDialogProps;
export declare let ModalBody: import("react-bootstrap/esm/helpers").BsPrefixRefForwardingComponent<"div", unknown>;
export declare type ModalHeaderProps = rbs.ModalHeaderProps;
export declare let ModalDialog: import("react").ForwardRefExoticComponent<rbs.ModalDialogProps & import("react").RefAttributes<HTMLDivElement>>;
export declare type ModalProps = rbs.ModalProps;
export declare let ModalFooter: import("react-bootstrap/esm/helpers").BsPrefixRefForwardingComponent<"div", unknown>;
export declare let ModalHeader: import("react").ForwardRefExoticComponent<rbs.ModalHeaderProps & import("react").RefAttributes<HTMLDivElement>>;
export declare let ModalTitle: import("react-bootstrap/esm/helpers").BsPrefixRefForwardingComponent<import("react").ForwardRefExoticComponent<Pick<import("react").DetailedHTMLProps<import("react").HTMLAttributes<HTMLDivElement>, HTMLDivElement>, "key" | keyof import("react").HTMLAttributes<HTMLDivElement>> & import("react").RefAttributes<HTMLDivElement>>, unknown>;
export declare let Nav: import("react-bootstrap/esm/helpers").BsPrefixRefForwardingComponent<"div", rbs.NavProps> & {
    Item: import("react-bootstrap/esm/helpers").BsPrefixRefForwardingComponent<"div", unknown>;
    Link: import("react-bootstrap/esm/helpers").BsPrefixRefForwardingComponent<"a", rbs.NavLinkProps>;
};
export declare type NavProps = rbs.NavProps;
export declare let NavDropdown: import("react-bootstrap/esm/helpers").BsPrefixRefForwardingComponent<"div", rbs.NavDropdownProps> & {
    Item: import("react-bootstrap/esm/helpers").BsPrefixRefForwardingComponent<import("@restart/ui/esm/types").DynamicRefForwardingComponent<import("react").ForwardRefExoticComponent<import("@restart/ui/esm/Button").ButtonProps & import("react").RefAttributes<HTMLElement>>, import("@restart/ui/esm/DropdownItem").DropdownItemProps>, import("react-bootstrap/esm/DropdownItem").DropdownItemProps>;
    ItemText: import("react-bootstrap/esm/helpers").BsPrefixRefForwardingComponent<"span", unknown>;
    Divider: import("react-bootstrap/esm/helpers").BsPrefixRefForwardingComponent<"hr", unknown>;
    Header: import("react-bootstrap/esm/helpers").BsPrefixRefForwardingComponent<"div", unknown>;
};
export declare type NavDropdownProps = rbs.NavDropdownProps;
export declare let NavItem: import("react-bootstrap/esm/helpers").BsPrefixRefForwardingComponent<"div", unknown>;
export declare let NavLink: import("react-bootstrap/esm/helpers").BsPrefixRefForwardingComponent<"a", rbs.NavLinkProps>;
export declare type NavLinkProps = rbs.NavLinkProps;
export declare let Navbar: import("react-bootstrap/esm/helpers").BsPrefixRefForwardingComponent<"nav", rbs.NavbarProps> & {
    Brand: import("react-bootstrap/esm/helpers").BsPrefixRefForwardingComponent<"a", rbs.NavbarBrandProps>;
    Collapse: import("react").ForwardRefExoticComponent<import("react-bootstrap/esm/NavbarCollapse").NavbarCollapseProps & import("react").RefAttributes<HTMLDivElement>>;
    Offcanvas: import("react").ForwardRefExoticComponent<Pick<import("react-bootstrap/esm/NavbarOffcanvas").NavbarOffcanvasProps, keyof rbs.OffcanvasProps> & import("react").RefAttributes<HTMLDivElement>>;
    Text: import("react-bootstrap/esm/helpers").BsPrefixRefForwardingComponent<"span", unknown>;
    Toggle: import("react-bootstrap/esm/helpers").BsPrefixRefForwardingComponent<"button", import("react-bootstrap/esm/NavbarToggle").NavbarToggleProps>;
};
export declare type NavbarProps = rbs.NavbarProps;
export declare let NavbarBrand: import("react-bootstrap/esm/helpers").BsPrefixRefForwardingComponent<"a", rbs.NavbarBrandProps>;
export declare type NavbarBrandProps = rbs.NavbarBrandProps;
export declare let Offcanvas: import("react-bootstrap/esm/helpers").BsPrefixRefForwardingComponent<"div", rbs.OffcanvasProps> & {
    Body: import("react-bootstrap/esm/helpers").BsPrefixRefForwardingComponent<"div", unknown>;
    Header: import("react").ForwardRefExoticComponent<rbs.OffcanvasHeaderProps & import("react").RefAttributes<HTMLDivElement>>;
    Title: import("react-bootstrap/esm/helpers").BsPrefixRefForwardingComponent<import("react").ForwardRefExoticComponent<Pick<import("react").DetailedHTMLProps<import("react").HTMLAttributes<HTMLDivElement>, HTMLDivElement>, "key" | keyof import("react").HTMLAttributes<HTMLDivElement>> & import("react").RefAttributes<HTMLDivElement>>, unknown>;
};
export declare type OffcanvasHeaderProps = rbs.OffcanvasHeaderProps;
export declare let OffcanvasBody: import("react-bootstrap/esm/helpers").BsPrefixRefForwardingComponent<"div", unknown>;
export declare type OffcanvasProps = rbs.OffcanvasProps;
export declare let OffcanvasHeader: import("react").ForwardRefExoticComponent<rbs.OffcanvasHeaderProps & import("react").RefAttributes<HTMLDivElement>>;
export declare let OffcanvasTitle: import("react-bootstrap/esm/helpers").BsPrefixRefForwardingComponent<import("react").ForwardRefExoticComponent<Pick<import("react").DetailedHTMLProps<import("react").HTMLAttributes<HTMLDivElement>, HTMLDivElement>, "key" | keyof import("react").HTMLAttributes<HTMLDivElement>> & import("react").RefAttributes<HTMLDivElement>>, unknown>;
export declare let Overlay: import("react").ForwardRefExoticComponent<rbs.OverlayProps & import("react").RefAttributes<HTMLElement>>;
export declare type OverlayProps = rbs.OverlayProps;
export declare let OverlayTrigger: typeof rbs.OverlayTrigger;
export declare type OverlayTriggerProps = rbs.OverlayTriggerProps;
export declare let PageItem: import("react-bootstrap/esm/helpers").BsPrefixRefForwardingComponent<"li", rbs.PageItemProps>;
export declare type PageItemProps = rbs.PageItemProps;
export declare let Pagination: import("react").ForwardRefExoticComponent<rbs.PaginationProps & import("react").RefAttributes<HTMLUListElement>> & {
    First: import("react").ForwardRefExoticComponent<rbs.PageItemProps & import("react").RefAttributes<unknown>>;
    Prev: import("react").ForwardRefExoticComponent<rbs.PageItemProps & import("react").RefAttributes<unknown>>;
    Ellipsis: import("react").ForwardRefExoticComponent<rbs.PageItemProps & import("react").RefAttributes<unknown>>;
    Item: import("react-bootstrap/esm/helpers").BsPrefixRefForwardingComponent<"li", rbs.PageItemProps>;
    Next: import("react").ForwardRefExoticComponent<rbs.PageItemProps & import("react").RefAttributes<unknown>>;
    Last: import("react").ForwardRefExoticComponent<rbs.PageItemProps & import("react").RefAttributes<unknown>>;
};
export declare type PaginationProps = rbs.PaginationProps;
export declare let Placeholder: import("react-bootstrap/esm/helpers").BsPrefixRefForwardingComponent<"span", rbs.PlaceholderProps> & {
    Button: import("react-bootstrap/esm/helpers").BsPrefixRefForwardingComponent<"button", rbs.PlaceholderButtonProps>;
};
export declare type PlaceholderButtonProps = rbs.PlaceholderButtonProps;
export declare let PlaceholderButton: import("react-bootstrap/esm/helpers").BsPrefixRefForwardingComponent<"button", rbs.PlaceholderButtonProps>;
export declare type PlaceholderProps = rbs.PlaceholderProps;
export declare let Popover: import("react").ForwardRefExoticComponent<rbs.PopoverProps & import("react").RefAttributes<HTMLDivElement>> & {
    Header: import("react-bootstrap/esm/helpers").BsPrefixRefForwardingComponent<"div", unknown>;
    Body: import("react-bootstrap/esm/helpers").BsPrefixRefForwardingComponent<"div", unknown>;
    POPPER_OFFSET: readonly [0, 8];
};
export declare type PopoverProps = rbs.PopoverProps;
export declare let PopoverBody: import("react-bootstrap/esm/helpers").BsPrefixRefForwardingComponent<"div", unknown>;
export declare let PopoverHeader: import("react-bootstrap/esm/helpers").BsPrefixRefForwardingComponent<"div", unknown>;
export declare let ProgressBar: import("react").ForwardRefExoticComponent<rbs.ProgressBarProps & import("react").RefAttributes<HTMLDivElement>>;
export declare type ProgressBarProps = rbs.ProgressBarProps;
export declare let Ratio: import("react").ForwardRefExoticComponent<rbs.RatioProps & import("react").RefAttributes<HTMLDivElement>>;
export declare type RatioProps = rbs.RatioProps;
export declare let Row: import("react-bootstrap/esm/helpers").BsPrefixRefForwardingComponent<"div", rbs.RowProps>;
export declare type RowProps = rbs.RowProps;
export declare let SSRProvider: typeof rbs.SSRProvider;
export declare type SSRProviderProps = rbs.SSRProviderProps;
export declare let Spinner: import("react-bootstrap/esm/helpers").BsPrefixRefForwardingComponent<"div", rbs.SpinnerProps>;
export declare type SpinnerProps = rbs.SpinnerProps;
export declare let SplitButton: import("react").ForwardRefExoticComponent<rbs.SplitButtonProps & import("react").RefAttributes<HTMLElement>>;
export declare type SplitButtonProps = rbs.SplitButtonProps;
export declare let Stack: import("react-bootstrap/esm/helpers").BsPrefixRefForwardingComponent<"span", rbs.StackProps>;
export declare type StackProps = rbs.StackProps;
export declare let Tab: import("react").FC<rbs.TabProps> & {
    Container: {
        ({ transition, ...props }: rbs.TabContainerProps): JSX.Element;
        propTypes: {
            id: import("prop-types").Requireable<string>;
            transition: import("prop-types").Requireable<boolean | import("prop-types").ReactComponentLike>;
            mountOnEnter: import("prop-types").Requireable<boolean>;
            unmountOnExit: import("prop-types").Requireable<boolean>;
            generateChildId: import("prop-types").Requireable<(...args: any[]) => any>;
            onSelect: import("prop-types").Requireable<(...args: any[]) => any>;
            activeKey: import("prop-types").Requireable<string | number>;
        };
        displayName: string;
    };
    Content: import("react-bootstrap/esm/helpers").BsPrefixRefForwardingComponent<"div", unknown>;
    Pane: import("react-bootstrap/esm/helpers").BsPrefixRefForwardingComponent<"div", rbs.TabPaneProps>;
};
export declare type TabProps = rbs.TabProps;
export declare let TabContainer: {
    ({ transition, ...props }: rbs.TabContainerProps): JSX.Element;
    propTypes: {
        id: import("prop-types").Requireable<string>;
        transition: import("prop-types").Requireable<boolean | import("prop-types").ReactComponentLike>;
        mountOnEnter: import("prop-types").Requireable<boolean>;
        unmountOnExit: import("prop-types").Requireable<boolean>;
        generateChildId: import("prop-types").Requireable<(...args: any[]) => any>;
        onSelect: import("prop-types").Requireable<(...args: any[]) => any>;
        activeKey: import("prop-types").Requireable<string | number>;
    };
    displayName: string;
};
export declare type TabContainerProps = rbs.TabContainerProps;
export declare let TabContent: import("react-bootstrap/esm/helpers").BsPrefixRefForwardingComponent<"div", unknown>;
export declare let TabPane: import("react-bootstrap/esm/helpers").BsPrefixRefForwardingComponent<"div", rbs.TabPaneProps>;
export declare type TabPaneProps = rbs.TabPaneProps;
export declare let Table: import("react").ForwardRefExoticComponent<rbs.TableProps & import("react").RefAttributes<HTMLTableElement>>;
export declare type TableProps = rbs.TableProps;
export declare let Tabs: {
    (props: rbs.TabsProps): JSX.Element;
    propTypes: {
        activeKey: import("prop-types").Requireable<string | number>;
        defaultActiveKey: import("prop-types").Requireable<string | number>;
        variant: import("prop-types").Requireable<string>;
        transition: import("prop-types").Requireable<boolean | import("prop-types").ReactComponentLike>;
        id: import("prop-types").Requireable<string>;
        onSelect: import("prop-types").Requireable<(...args: any[]) => any>;
        mountOnEnter: import("prop-types").Requireable<boolean>;
        unmountOnExit: import("prop-types").Requireable<boolean>;
    };
    defaultProps: {
        variant: string;
        mountOnEnter: boolean;
        unmountOnExit: boolean;
    };
    displayName: string;
};
export declare type TabsProps = rbs.TabsProps;
export declare let ThemeProvider: typeof rbs.ThemeProvider;
export declare type ThemeProviderProps = rbs.ThemeProviderProps;
export declare let Toast: import("react-bootstrap/esm/helpers").BsPrefixRefForwardingComponent<"div", rbs.ToastProps> & {
    Body: import("react-bootstrap/esm/helpers").BsPrefixRefForwardingComponent<"div", unknown>;
    Header: import("react").ForwardRefExoticComponent<rbs.ToastHeaderProps & import("react").RefAttributes<HTMLDivElement>>;
};
export declare type ToastProps = rbs.ToastProps;
export declare let ToastBody: import("react-bootstrap/esm/helpers").BsPrefixRefForwardingComponent<"div", unknown>;
export declare let ToastContainer: import("react-bootstrap/esm/helpers").BsPrefixRefForwardingComponent<"div", rbs.ToastContainerProps>;
export declare type ToastContainerProps = rbs.ToastContainerProps;
export declare let ToastHeader: import("react").ForwardRefExoticComponent<rbs.ToastHeaderProps & import("react").RefAttributes<HTMLDivElement>>;
export declare type ToastHeaderProps = rbs.ToastHeaderProps;
export declare let ToggleButton: import("react").ForwardRefExoticComponent<rbs.ToggleButtonProps & import("react").RefAttributes<HTMLLabelElement>>;
export declare let ToggleButtonGroup: import("react-bootstrap/esm/helpers").BsPrefixRefForwardingComponent<"a", rbs.ToggleButtonGroupProps<any>> & {
    Button: import("react").ForwardRefExoticComponent<rbs.ToggleButtonProps & import("react").RefAttributes<HTMLLabelElement>>;
};
export declare type ToggleButtonCheckboxProps<T> = rbs.ToggleButtonCheckboxProps<T>;
export declare type ToggleButtonProps = rbs.ToggleButtonProps;
export declare type ToggleButtonGroupProps<T> = rbs.ToggleButtonGroupProps<T>;
export declare type ToggleButtonRadioProps<T> = rbs.ToggleButtonRadioProps<T>;
export declare let Tooltip: import("react").ForwardRefExoticComponent<rbs.TooltipProps & import("react").RefAttributes<HTMLDivElement>>;
export declare type TooltipProps = rbs.TooltipProps;
export declare let useAccordionButton: typeof rbs.useAccordionButton;
