import rdjsToolkit, { Action as rdjsAction, ActionCreator as rdjsActionCreator, ActionCreatorWithNonInferrablePayload as rdjsActionCreatorWithNonInferrablePayload, ActionCreatorWithOptionalPayload as rdjsActionCreatorWithOptionalPayload, ActionCreatorWithPayload as rdjsActionCreatorWithPayload, ActionCreatorWithPreparedPayload as rdjsActionCreatorWithPreparedPayload, ActionCreatorWithoutPayload as rdjsActionCreatorWithoutPayload, ActionCreatorsMapObject as rdjsActionCreatorsMapObject, ActionFromReducer as rdjsActionFromReducer, ActionFromReducersMapObject as rdjsActionFromReducersMapObject, ActionMatchingAllOf as rdjsActionMatchingAllOf, ActionMatchingAnyOf as rdjsActionMatchingAnyOf, ActionReducerMapBuilder as rdjsActionReducerMapBuilder, AnyAction as rdjsAnyAction, AsyncTaskExecutor as rdjsAsyncTaskExecutor, AsyncThunk as rdjsAsyncThunk, AsyncThunkAction as rdjsAsyncThunkAction, AsyncThunkOptions as rdjsAsyncThunkOptions, AsyncThunkPayloadCreator as rdjsAsyncThunkPayloadCreator, AsyncThunkPayloadCreatorReturnValue as rdjsAsyncThunkPayloadCreatorReturnValue, Actions as rdjsActions, CaseReducer as rdjsCaseReducer, CaseReducerActions as rdjsCaseReducerActions, CaseReducerWithPrepare as rdjsCaseReducerWithPrepare, CombinedState as rdjsCombinedState, Comparer as rdjsComparer, ConfigureEnhancersCallback as rdjsConfigureEnhancersCallback, ConfigureStoreOptions as rdjsConfigureStoreOptions, CreateListenerMiddlewareOptions as rdjsCreateListenerMiddlewareOptions, CreateSliceOptions as rdjsCreateSliceOptions, CaseReducers as rdjsCaseReducers, DeepPartial as rdjsDeepPartial, Dictionary as rdjsDictionary, Dispatch as rdjsDispatch, Draft as rdjsDraft, EmptyObject as rdjsEmptyObject, EnhancedStore as rdjsEnhancedStore, EntityAdapter as rdjsEntityAdapter, EntityId as rdjsEntityId, EntitySelectors as rdjsEntitySelectors, EntityState as rdjsEntityState, EntityStateAdapter as rdjsEntityStateAdapter, ForkedTask as rdjsForkedTask, ForkedTaskAPI as rdjsForkedTaskAPI, ForkedTaskExecutor as rdjsForkedTaskExecutor, Func0 as rdjsFunc0, Func1 as rdjsFunc1, Func2 as rdjsFunc2, Func3 as rdjsFunc3, IdSelector as rdjsIdSelector, ImmutableStateInvariantMiddlewareOptions as rdjsImmutableStateInvariantMiddlewareOptions, ListenerEffect as rdjsListenerEffect, ListenerEffectAPI as rdjsListenerEffectAPI, ListenerErrorHandler as rdjsListenerErrorHandler, ListenerMiddleware as rdjsListenerMiddleware, ListenerMiddlewareInstance as rdjsListenerMiddlewareInstance, Middleware as rdjsMiddleware, MiddlewareAPI as rdjsMiddlewareAPI, MiddlewareArray as rdjsMiddlewareArray, Observable as rdjsObservable, Observer as rdjsObserver, OutputParametricSelector as rdjsOutputParametricSelector, OutputSelector as rdjsOutputSelector, ParametricSelector as rdjsParametricSelector, PayloadAction as rdjsPayloadAction, PayloadActionCreator as rdjsPayloadActionCreator, PreloadedState as rdjsPreloadedState, PrepareAction as rdjsPrepareAction, Reducer as rdjsReducer, ReducerFromReducersMapObject as rdjsReducerFromReducersMapObject, ReducersMapObject as rdjsReducersMapObject, Selector as rdjsSelector, SerializableStateInvariantMiddlewareOptions as rdjsSerializableStateInvariantMiddlewareOptions, SerializedError as rdjsSerializedError, Slice as rdjsSlice, SliceCaseReducers as rdjsSliceCaseReducers, StateFromReducersMapObject as rdjsStateFromReducersMapObject, Store as rdjsStore, StoreCreator as rdjsStoreCreator, StoreEnhancer as rdjsStoreEnhancer, StoreEnhancerStoreCreator as rdjsStoreEnhancerStoreCreator, SyncTaskExecutor as rdjsSyncTaskExecutor, SliceActionCreator as rdjsSliceActionCreator, TaskAbortError as rdjsTaskAbortError, TaskCancelled as rdjsTaskCancelled, TaskRejected as rdjsTaskRejected, TaskResolved as rdjsTaskResolved, TaskResult as rdjsTaskResult, ThunkAction as rdjsThunkAction, ThunkDispatch as rdjsThunkDispatch, TypedAddListener as rdjsTypedAddListener, TypedRemoveListener as rdjsTypedRemoveListener, TypedStartListening as rdjsTypedStartListening, TypedStopListening as rdjsTypedStopListening, Unsubscribe as rdjsUnsubscribe, UnsubscribeListener as rdjsUnsubscribeListener, UnsubscribeListenerOptions as rdjsUnsubscribeListenerOptions, Update as rdjsUpdate, ValidateSliceCaseReducers as rdjsValidateSliceCaseReducers } from '@reduxjs/toolkit';
export declare type Action = rdjsAction;
export declare type ActionCreator<A> = rdjsActionCreator<A>;
export declare type ActionCreatorWithNonInferrablePayload = rdjsActionCreatorWithNonInferrablePayload;
export declare type ActionCreatorWithOptionalPayload<P, T extends string = string> = rdjsActionCreatorWithOptionalPayload<P, T>;
export declare type ActionCreatorWithPayload<P, T extends string = string> = rdjsActionCreatorWithPayload<P, T>;
export declare type ActionCreatorWithPreparedPayload<Args extends unknown[], P, T extends string = string, E = never, M = never> = rdjsActionCreatorWithPreparedPayload<Args, P, T, E, M>;
export declare type ActionCreatorWithoutPayload = rdjsActionCreatorWithoutPayload;
export declare type ActionCreatorsMapObject = rdjsActionCreatorsMapObject;
export declare type ActionFromReducer = rdjsActionFromReducer;
export declare type ActionFromReducersMapObject = rdjsActionFromReducersMapObject;
export declare type ActionMatchingAllOf = rdjsActionMatchingAllOf;
export declare type ActionMatchingAnyOf = rdjsActionMatchingAnyOf;
export declare type ActionReducerMapBuilder = rdjsActionReducerMapBuilder;
export declare type AnyAction = rdjsAnyAction;
export declare type AsyncTaskExecutor = rdjsAsyncTaskExecutor;
export declare type AsyncThunk = rdjsAsyncThunk;
export declare type AsyncThunkAction = rdjsAsyncThunkAction;
export declare type AsyncThunkOptions = rdjsAsyncThunkOptions;
export declare type AsyncThunkPayloadCreator = rdjsAsyncThunkPayloadCreator;
export declare type AsyncThunkPayloadCreatorReturnValue = rdjsAsyncThunkPayloadCreatorReturnValue;
export declare type Actions = rdjsActions;
export declare type CaseReducer = rdjsCaseReducer;
export declare type CaseReducerActions = rdjsCaseReducerActions;
export declare type CaseReducerWithPrepare = rdjsCaseReducerWithPrepare;
export declare type CombinedState = rdjsCombinedState;
export declare type Comparer = rdjsComparer;
export declare type ConfigureEnhancersCallback = rdjsConfigureEnhancersCallback;
export declare type ConfigureStoreOptions = rdjsConfigureStoreOptions;
export declare type CreateListenerMiddlewareOptions = rdjsCreateListenerMiddlewareOptions;
export declare type CreateSliceOptions = rdjsCreateSliceOptions;
export declare type CaseReducers = rdjsCaseReducers;
export declare type DeepPartial = rdjsDeepPartial;
export declare type Dictionary = rdjsDictionary;
export declare type Dispatch = rdjsDispatch;
export declare type Draft = rdjsDraft;
export declare type EmptyObject = rdjsEmptyObject;
export declare type EnhancedStore = rdjsEnhancedStore;
export declare type EntityAdapter = rdjsEntityAdapter;
export declare type EntityId = rdjsEntityId;
export declare type EntitySelectors = rdjsEntitySelectors;
export declare type EntityState = rdjsEntityState;
export declare type EntityStateAdapter = rdjsEntityStateAdapter;
export declare type ForkedTask = rdjsForkedTask;
export declare type ForkedTaskAPI = rdjsForkedTaskAPI;
export declare type ForkedTaskExecutor = rdjsForkedTaskExecutor;
export declare type Func0 = rdjsFunc0;
export declare type Func1 = rdjsFunc1;
export declare type Func2 = rdjsFunc2;
export declare type Func3 = rdjsFunc3;
export declare type IdSelector = rdjsIdSelector;
export declare type ImmutableStateInvariantMiddlewareOptions = rdjsImmutableStateInvariantMiddlewareOptions;
export declare type ListenerEffect = rdjsListenerEffect;
export declare type ListenerEffectAPI = rdjsListenerEffectAPI;
export declare type ListenerErrorHandler = rdjsListenerErrorHandler;
export declare type ListenerMiddleware = rdjsListenerMiddleware;
export declare type ListenerMiddlewareInstance = rdjsListenerMiddlewareInstance;
export declare type Middleware = rdjsMiddleware;
export declare type MiddlewareAPI = rdjsMiddlewareAPI;
export declare type MiddlewareArray = rdjsMiddlewareArray;
export declare type Observable = rdjsObservable;
export declare type Observer = rdjsObserver;
export declare type OutputParametricSelector = rdjsOutputParametricSelector;
export declare type OutputSelector = rdjsOutputSelector;
export declare type ParametricSelector = rdjsParametricSelector;
export declare type PayloadAction = rdjsPayloadAction;
export declare type PayloadActionCreator = rdjsPayloadActionCreator;
export declare type PreloadedState = rdjsPreloadedState;
export declare type PrepareAction = rdjsPrepareAction;
export declare type Reducer = rdjsReducer;
export declare type ReducerFromReducersMapObject = rdjsReducerFromReducersMapObject;
export declare type ReducersMapObject = rdjsReducersMapObject;
export declare type Selector = rdjsSelector;
export declare type SerializableStateInvariantMiddlewareOptions = rdjsSerializableStateInvariantMiddlewareOptions;
export declare type SerializedError = rdjsSerializedError;
export declare type Slice = rdjsSlice;
export declare type SliceCaseReducers = rdjsSliceCaseReducers;
export declare type StateFromReducersMapObject = rdjsStateFromReducersMapObject;
export declare type Store = rdjsStore;
export declare type StoreCreator = rdjsStoreCreator;
export declare type StoreEnhancer = rdjsStoreEnhancer;
export declare type StoreEnhancerStoreCreator = rdjsStoreEnhancerStoreCreator;
export declare type SyncTaskExecutor = rdjsSyncTaskExecutor;
export declare type SliceActionCreator = rdjsSliceActionCreator;
export declare type TaskAbortError = rdjsTaskAbortError;
export declare type TaskCancelled = rdjsTaskCancelled;
export declare type TaskRejected = rdjsTaskRejected;
export declare type TaskResolved = rdjsTaskResolved;
export declare type TaskResult = rdjsTaskResult;
export declare type ThunkAction = rdjsThunkAction;
export declare type ThunkDispatch = rdjsThunkDispatch;
export declare type TypedAddListener = rdjsTypedAddListener;
export declare type TypedRemoveListener = rdjsTypedRemoveListener;
export declare type TypedStartListening = rdjsTypedStartListening;
export declare type TypedStopListening = rdjsTypedStopListening;
export declare type Unsubscribe = rdjsUnsubscribe;
export declare type UnsubscribeListener = rdjsUnsubscribeListener;
export declare type UnsubscribeListenerOptions = rdjsUnsubscribeListenerOptions;
export declare type Update = rdjsUpdate;
export declare type ValidateSliceCaseReducers = rdjsValidateSliceCaseReducers;
export declare let addListener: rdjsToolkit.TypedAddListener<unknown, rdjsToolkit.ThunkDispatch<unknown, unknown, rdjsToolkit.AnyAction>, unknown, import("@reduxjs/toolkit/dist/listenerMiddleware/types").ListenerEntry<unknown, rdjsToolkit.ThunkDispatch<unknown, unknown, rdjsToolkit.AnyAction>>, "listenerMiddleware/add">;
export declare let applyMiddleware: typeof rdjsToolkit.applyMiddleware;
export declare let bindActionCreators: typeof rdjsToolkit.bindActionCreators;
export declare let clearAllListeners: rdjsToolkit.ActionCreatorWithoutPayload<string>;
export declare let combineReducers: typeof rdjsToolkit.combineReducers;
export declare let compose: typeof rdjsToolkit.compose;
export declare let configureStore: typeof rdjsToolkit.configureStore;
export declare let createAction: typeof rdjsToolkit.createAction;
export declare let createAsyncThunk: typeof rdjsToolkit.createAsyncThunk;
export declare let createDraftSafeSelector: import("reselect").CreateSelectorFunction<(...args: unknown[]) => unknown, typeof import("reselect").defaultMemoize, [equalityCheckOrOptions?: import("reselect").EqualityFn | import("reselect").DefaultMemoizeOptions], {
    clearCache: () => void;
}>;
export declare let createEntityAdapter: typeof rdjsToolkit.createEntityAdapter;
export declare let createImmutableStateInvariantMiddleware: typeof rdjsToolkit.createImmutableStateInvariantMiddleware;
export declare let createListenerMiddleware: typeof rdjsToolkit.createListenerMiddleware;
export declare let createNextState: import("immer/dist/internal").IProduce;
export declare let createReducer: typeof rdjsToolkit.createReducer;
export declare let createSelector: import("reselect").CreateSelectorFunction<(...args: unknown[]) => unknown, typeof import("reselect").defaultMemoize, [equalityCheckOrOptions?: import("reselect").EqualityFn | import("reselect").DefaultMemoizeOptions], {
    clearCache: () => void;
}>;
export declare let createSerializableStateInvariantMiddleware: typeof rdjsToolkit.createSerializableStateInvariantMiddleware;
export declare let createSlice: typeof rdjsToolkit.createSlice;
export declare let current: typeof rdjsToolkit.current;
export declare let createStore: typeof rdjsToolkit.createStore;
export declare let findNonSerializableValue: typeof rdjsToolkit.findNonSerializableValue;
export declare let freeze: typeof rdjsToolkit.freeze;
export declare let getType: typeof rdjsToolkit.getType;
export declare let getDefaultMiddleware: typeof rdjsToolkit.getDefaultMiddleware;
export declare let isAllOf: typeof rdjsToolkit.isAllOf;
export declare let isAnyOf: typeof rdjsToolkit.isAnyOf;
export declare let isAsyncThunkAction: typeof rdjsToolkit.isAsyncThunkAction;
export declare let isDraft: typeof rdjsToolkit.isDraft;
export declare let isFulfilled: typeof rdjsToolkit.isFulfilled;
export declare let isImmutableDefault: typeof rdjsToolkit.isImmutableDefault;
export declare let isPending: typeof rdjsToolkit.isPending;
export declare let isPlain: typeof rdjsToolkit.isPlain;
export declare let isPlainObject: typeof rdjsToolkit.isPlainObject;
export declare let isRejected: typeof rdjsToolkit.isRejected;
export declare let isRejectedWithValue: typeof rdjsToolkit.isRejectedWithValue;
export declare let legacy_createStore: typeof rdjsToolkit.legacy_createStore;
export declare let miniSerializeError: (value: any) => rdjsToolkit.SerializedError;
export declare let nanoid: (size?: number) => string;
export declare let original: typeof rdjsToolkit.original;
export declare let removeListener: rdjsToolkit.TypedRemoveListener<unknown, rdjsToolkit.ThunkDispatch<unknown, unknown, rdjsToolkit.AnyAction>, import("@reduxjs/toolkit/dist/listenerMiddleware/types").ListenerEntry<unknown, rdjsToolkit.ThunkDispatch<unknown, unknown, rdjsToolkit.AnyAction>>, "listenerMiddleware/remove">;
export declare let unwrapResult: typeof rdjsToolkit.unwrapResult;
